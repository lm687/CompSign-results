##-----------------------------------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../../2_inference_TMB/")
##-----------------------------------------------------------------------------------------------------##
source("../2_inference_TMB/helper_TMB.R")
library(TMB)
library(ggrepel)
library(cowplot)
library(gridExtra)
library(dplyr)
library(jcolors)
library(viridis)
library(reshape2)
library(mutSigExtractor)
##-----------------------------------------------------------------------------------------------------##
enough_samples = read.table("../../data/pcawg/CT_sufficient_samples.txt", comment.char='#')[,1]
enough_samples
nucleotide_colours_logR <- c('C$>$A/T$>$G'= '#3cb371', 'C$>$G/T$>$G'= '#90ee90', 'C$>$T/T$>$G'= '#66cdaa',
'T$>$A/T$>$G'= '#cd5c5c', 'T$>$C/T$>$G'= '#f4a460')
nucleotide_colours <- c('C>A' = '#3cb371', 'C>G'= '#90ee90', 'C>T'= '#66cdaa',
'T>A'= '#cd5c5c', 'T>C'= '#f4a460', 'T>G'='red')
nucleotide_colours_dollar <- c('C$>$A' = '#3cb371', 'C$>$G'= '#90ee90', 'C$>$T'= '#66cdaa',
'T$>$A'= '#cd5c5c', 'T$>$C'= '#f4a460', 'T$>$G'='red')
nucleotide_colours_logR <- c('C$>$A/T$>$G'= '#a53606', 'C$>$G/T$>$G'= '#b32db5', 'C$>$T/T$>$G'= '#881a58',
'T$>$A/T$>$G'= '#0e288e', 'T$>$C/T$>$G'= '#164c64')
nucleotide_colours <- c('C>A' = '#a53606', 'C>G'= '#b32db5', 'C>T'= '#881a58',
'T>A'= '#0e288e', 'T>C'= '#164c64', 'T>G'='red')
nucleotide_colours_dollar <- c('C$>$A' = '#a53606', 'C$>$G'= '#b32db5', 'C$>$T'= '#881a58',
'T$>$A'= '#0e288e', 'T$>$C'= '#164c64', 'T$>$G'='red')
nucleotide_colours_logR <- c('C$>$A/T$>$G'= '#377eb8', 'C$>$G/T$>$G'= '#ff7f00', 'C$>$T/T$>$G'= '#984ea3',
'T$>$A/T$>$G'= '#f781bf', 'T$>$C/T$>$G'= '#a65628')
nucleotide_colours <- c('C>A' = '#377eb8', 'C>G'= '#ff7f00', 'C>T'= '#984ea3',
'T>A'= '#f781bf', 'T>C'= '#a65628', 'T>G'='red')
nucleotide_colours_dollar <- c('C$>$A' = '#377eb8', 'C$>$G'= '#ff7f00', 'C$>$T'= '#984ea3',
'T$>$A'= '#f781bf', 'T$>$C'= '#a65628', 'T$>$G'='red')
##-----------------------------------------------------------------------------------------------------##
read_info <- function(ct){
.x <- list(#fullRE_M_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREM_", ct, "_signaturesPCAWG.RDS"))),
#fullRE_DMSL_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDMsinglelambda_", ct, "_signaturesPCAWG.RDS"))),
#fullRE_M_nonexo_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREMnonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullRE_DMSL_nonexo_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDMsinglelambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS"))),
#diagRE_DMDL_nonexo_SP =  try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDMnonexo_", ct, "_signaturesPCAWG.RDS"))),
#diagRE_DMDL_wSBS1SBS5nonexo_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDMwSBS1SBS5nonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMnoscaling_SP_nonexo =  try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDMnoscalingnonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMnoscaling_SP_nonexo_subsets_and_amalgamations <- try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDMnoscalingnonexosubset_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMonefixedlambdanonexo_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMonefixedlambda2nonexo_SP = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDMonefixedlambda2nonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMonefixedlambdanonexo_SPSaA = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWGSaA.RDS"))),
#fullREM_MSE = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREM_", ct, "_signaturesMSE.RDS"))),
#fullREDM_MSE = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDM_", ct, "_signaturesMSE.RDS"))),
fullREDM_nucleotide1 = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDM_", ct, "_nucleotidesubstitution1.RDS"))),
#diagREDM_MSE = try(readRDS(paste0("../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDM_", ct, "_signaturesMSE.RDS"))),
#dataset_all_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../data/", load_all_sigs = T, override_warning_X_Z = T),
dataset_active_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../data/", override_warning_X_Z = T),
dataset_nucleotidesubstitution1 = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution1", path_to_data = "../../data/", override_warning_X_Z = T)
#dataset_nucleotidesubstitution3 = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution3", path_to_data = "../../data/", override_warning_X_Z = T),
#dataset_nucleotidesubstitution3MSE = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution3MSE", path_to_data = "../../data/", override_warning_X_Z = T),
#dataset_active_sigs_MSE = load_PCAWG(ct = ct, typedata = "signaturesMSE", path_to_data = "../../data/", load_all_sigs = F, override_warning_X_Z = T),
#DMM = list(z_DMM=lapply(1:8, function(k) try(read.table(paste0("../../data/roo_for_DMM_SPpcawg/DMM_output/", ct, "_signaturesPCAWG_all", k, "_dmm.z"), sep = ',', skip = 1))),
#            fit_DMM = lapply(1:8, function(k) try(read.table(paste0("../../data/roo_for_DMM_SPpcawg/DMM_output/", ct, "_signaturesPCAWG_all", k, "_dmm.fit"), sep = ' '))))
)
return(.x)
}
##-----------------------------------------------------------------------------------------------------##
read_info_list <- lapply(enough_samples, read_info)
names(read_info_list) <- enough_samples
##-----------------------------------------------------------------------------------------------------##
source("../3_analysis/helper/pcawg.colour.palette.R")
pcawg_palette <- pcawg.colour.palette(x = gsub("\\..*", "", names(read_info_list)),  scheme = "tumour.subtype")
names(pcawg_palette) <- names(read_info_list)
##-----------------------------------------------------------------------------------------------------##
diagRE_DMDL <- lapply(read_info_list, function(i) i$diagRE_DMDL_SP)
nucleotide1 <- sapply(read_info_list, `[`, 'fullREDM_nucleotide1')
names(nucleotide1) <- names(read_info_list)
names_trinucleotide <- vector_cats_to_logR(colnames(read_info_list[[1]]$dataset_nucleotidesubstitution1$Y))
betas_nucleotides <- lapply(nucleotide1, function(i) plot_betas(i, return_df = T))
betas_nucleotides <- lapply(betas_nucleotides, function(i){
i$LogR <- names_trinucleotide[i$LogR]
# rownames(i) <- make.names(i$LogR, unique = T)
i
})
betas_nucleotides_slopes <- do.call('cbind', lapply(betas_nucleotides, function(i) i%>% filter(type_beta == 'Slope' ) %>% select(Estimate)))
colnames(betas_nucleotides_slopes) <- names(nucleotide1)
rownames(betas_nucleotides_slopes) <- names_trinucleotide
rownames(betas_nucleotides_slopes) <- gsub(">", "$>$", rownames(betas_nucleotides_slopes))
betas_nucleotides_slopes_softmax <- apply(betas_nucleotides_slopes, 2, function(i) softmax(c(i,0)))
rownames(betas_nucleotides_slopes_softmax) <- names(nucleotide_colours_dollar)
betas_nucleotides_slopes_softmax
betas_nucleotides_slopes_softmax['C$>$T',]
apply(betas_nucleotides_slopes_softmax, 1, function(i) cor(i, betas_nucleotides_slopes_softmax['C$>$T',], method = 'pearson'))
sort(apply(betas_nucleotides_slopes_softmax, 1, function(i) cor(i, betas_nucleotides_slopes_softmax['C$>$T',], method = 'pearson')))
cor(i, betas_nucleotides_slopes_softmax['T$>$A',]
i, betas_nucleotides_slopes_softmax['T$>$C',])
cor(betas_nucleotides_slopes_softmax['T$>$A',]
betas_nucleotides_slopes_softmax['T$>$C',])
cor(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',])
betas_nucleotides_slopes_softmax['T$>$A',]
plot(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',])
cor(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',], method = 'pearson')
cor.test(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',], method = 'pearson')
cor.test(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',], method = 'spearman')
cor.test(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',], method = 'kendall')
plot(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',])
betas_nucleotides_slopes_softmax
outer(1:nrow(betas_nucleotides_slopes_softmax), 1:nrow(betas_nucleotides_slopes_softmax), function(i,j){
cor(betas_nucleotides_slopes_softmax[i,],
betas_nucleotides_slopes_softmax[j,], method = 'pearson')
})
outer(1:nrow(betas_nucleotides_slopes_softmax), 1:nrow(betas_nucleotides_slopes_softmax), Vectorize(function(i,j){
cor(betas_nucleotides_slopes_softmax[i,],
betas_nucleotides_slopes_softmax[j,], method = 'pearson')
}))
max(outer(1:nrow(betas_nucleotides_slopes_softmax), 1:nrow(betas_nucleotides_slopes_softmax), Vectorize(function(i,j){
cor(betas_nucleotides_slopes_softmax[i,],
betas_nucleotides_slopes_softmax[j,], method = 'pearson')
})))
plot(betas_nucleotides_slopes_softmax[4,],
betas_nucleotides_slopes_softmax[6,])
sort(apply(betas_nucleotides_slopes, 1, function(i) cor(i, betas_nucleotides_slopes['C$>$T',], method = 'pearson')))
betas_nucleotides_slopes
sort(apply(betas_nucleotides_slopes, 1, function(i) cor(i, betas_nucleotides_slopes['C$>$T/T$>$G',], method = 'pearson')))
betas_nucleotides_slopes['C$>$T/T$>$G',]
betas_nucleotides_slopes
length(betas_nucleotides_slopes[1,])
length(betas_nucleotides_slopes['C$>$T/T$>$G',])
sort(apply(betas_nucleotides_slopes, 1, function(i) cor(i, betas_nucleotides_slopes['C$>$T/T$>$G',], method = 'pearson')))
sort(apply(betas_nucleotides_slopes, 1, function(i) try(cor(i, betas_nucleotides_slopes['C$>$T/T$>$G',], method = 'pearson'))))
(apply(betas_nucleotides_slopes, 1, function(i) try(cor(i, betas_nucleotides_slopes['C$>$T/T$>$G',], method = 'pearson'))))
cor(betas_nucleotides_slopes[1,], betas_nucleotides_slopes['C$>$T/T$>$G',])
betas_nucleotides_slopes['C$>$T/T$>$G',]
betas_nucleotides_slopes[1,]
cor(betas_nucleotides_slopes[1,], betas_nucleotides_slopes[1,])
cor(as.vector(betas_nucleotides_slopes[1,]), as.vector(betas_nucleotides_slopes[1,]))
as.vector(betas_nucleotides_slopes[1,])
cor(unlist(betas_nucleotides_slopes[1,]), unlist(betas_nucleotides_slopes[1,]))
betas_nucleotides_slopes
betas_nucleotides_slopes[1,]
apply(betas_nucleotides_slopes, 1, as.vector)
apply(betas_nucleotides_slopes, 2, as.vector)
betas_nucleotides_slopes_mat = apply(betas_nucleotides_slopes, 2, as.vector)
rownames(betas_nucleotides_slopes_mat) <- rownames(betas_nucleotides_slopes)
plot(betas_nucleotides_slopes_softmax['T$>$A',],
betas_nucleotides_slopes_softmax['T$>$C',])
(apply(betas_nucleotides_slopes_mat, 1, function(i) (cor(i, betas_nucleotides_slopes['C$>$T/T$>$G',], method = 'pearson'))))
rownames(betas_nucleotides_slopes)
make.names(rownames(betas_nucleotides_slopes))
gsub("$", "", (rownames(betas_nucleotides_slopes)))
gsub("[$]", "", (rownames(betas_nucleotides_slopes)))
gsub("[$]|>", "", (rownames(betas_nucleotides_slopes)))
gsub("/", "wrt", gsub("[$]|>", "", (rownames(betas_nucleotides_slopes))))
betas_nucleotides_slopes_mat = apply(betas_nucleotides_slopes, 2, as.vector)
rownames(betas_nucleotides_slopes_mat) <- gsub("/", "wrt", gsub("[$]|>", "", (rownames(betas_nucleotides_slopes))))
(apply(betas_nucleotides_slopes_mat, 1, function(i) (cor(i, betas_nucleotides_slopes['C$>$T/T$>$G',], method = 'pearson'))))
betas_nucleotides_slopes
(apply(betas_nucleotides_slopes_mat, 1, function(i) (cor(i, betas_nucleotides_slopes_mat['C$>$T/T$>$G',], method = 'pearson'))))
betas_nucleotides_slopes_mat
(apply(betas_nucleotides_slopes_mat, 1, function(i) (cor(i, betas_nucleotides_slopes_mat['CTwrtTG',], method = 'pearson'))))
plot(betas_nucleotides_slopes_mat['TAwrtTG',],
betas_nucleotides_slopes_mat['TCwrtTG',])
betas_nucleotides_slopes_mat = apply(betas_nucleotides_slopes, 2, as.vector)
rownames(betas_nucleotides_slopes_mat) <- gsub("/", "wrt", gsub("[$]|>", "", (rownames(betas_nucleotides_slopes))))
(apply(betas_nucleotides_slopes_mat, 1, function(i) (cor(i, betas_nucleotides_slopes_mat['CTwrtTG',], method = 'pearson'))))
cor(betas_nucleotides_slopes_mat['TAwrtTG',],
betas_nucleotides_slopes_mat['TCwrtTG',])
cor.test(betas_nucleotides_slopes_mat['TAwrtTG',],
betas_nucleotides_slopes_mat['TCwrtTG',])
(apply(betas_nucleotides_slopes_mat, 1, function(i) (cor.test(i, betas_nucleotides_slopes_mat['CTwrtTG',], method = 'pearson'))))
cor(betas_nucleotides_slopes_mat['TAwrtTG',],
betas_nucleotides_slopes_mat['TCwrtTG',])
cor.test(betas_nucleotides_slopes_mat['TAwrtTG',],
betas_nucleotides_slopes_mat['TCwrtTG',])
library(CompSign)
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagREDM", use_nlminb=T, smart_init_vals=F)
library(CompSign)
simplified_object
browseVignettes("CompSign")
PancEndocrine_signaturesMSE = load_PCAWG("../inst/extdata/roo/Panc-Endocrine_signaturesMSE_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
load_PCAWG("../../data/roo/Bladder-TCC_nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
simplified_object <- load_PCAWG("../../data/roo/Bladder-TCC_nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagREDM", use_nlminb=T, smart_init_vals=F)
wrapper_run_TMB
?wrapper_run_TMB
install.packages('devtools') ## if needed
library(devtools)
devtools::install_github("lm687/CompSign", build_vignettes = TRUE)
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagRE_DM", use_nlminb=T, smart_init_vals=F)
simplified_object <- load_PCAWG("../../data/roo/Bladder-TCC_nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagRE_DM", use_nlminb=T, smart_init_vals=F)
simplified_object
rm(list = ls())
install.packages('devtools') ## if needed
install.packages("devtools")
simplified_object <- load_PCAWG("../../data/roo/Bladder-TCC_nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
save(simplified_object, "~/Desktop/DM/CompSign/data/simplified_object.rda")
save(simplified_object, file = "~/Desktop/DM/CompSign/data/simplified_object.rda")
load_PCAWG("../../data/roo/Bladder-TCC_nucleotidesubstitution1_ROO.RDS")
Bladder-TCC
simplified_object$x
simplified_object$z
simplified_object$Y
simplified_object
simplified_object$Y
dim(simplified_object$Y)
rm(list = ls())
# install.packages('devtools') ## if needed
library(devtools)
devtools::install_github("lm687/CompSign", build_vignettes = TRUE)
library(CompSign)
data(package='CompSign')
#
data(package='CompSign', list = T)
?data
simplified_object
data(package='CompSign')
data(simplified_object)
simplified_object
data(package='CompSign')
data(obj_multilambda_parameters)
data(simplified_object)
obj_multilambda_parameters
simplified_object
.rs.restartR()
.rs.restartR()
rm(list = ls())
# install.packages('devtools') ## if needed
library(devtools)
library(CompSign)
data(package='CompSign')
data(simplified_object)
simplified_object
dim(v)
dim()
dim(simplified_object$Y)
wrapper_run_TMB
simplified_object
simplified_object$Y
colnames(simplified_object$Y)
#
# simplified_object <- load_PCAWG("../../data/roo/Bladder-TCC_nucleotidesubstitution1_ROO.RDS",
#            read_directly = T,
#            typedata = "signaturesMSE", override_warning_X_Z = T)
#
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagRE_DM", use_nlminb=T, smart_init_vals=F)
diagDM_no_small_sigs$par.fixed
plot_betas()
plot_betas
.summary_betas = diagDM_no_small_sigs
cbind.data.frame(python_like_select_rownames(.summary_betas,
"beta"), type_beta = rep(c("Intercept", "Slope")),
LogR = rep(1:(nrow(python_like_select_rownames(.summary_betas,
"beta"))/2), each = 2))
.summary_betas = diagDM_no_small_sigs$par.fixed
cbind.data.frame(python_like_select_rownames(.summary_betas,
"beta"), type_beta = rep(c("Intercept", "Slope")),
LogR = rep(1:(nrow(python_like_select_rownames(.summary_betas,
"beta"))/2), each = 2))
.summary_betas = summary(diagDM_no_small_sigs)
.summary_betas = Summary(diagDM_no_small_sigs)
.summary_betas = sdreport(diagDM_no_small_sigs)
.summary_betas
.summary_betas = diagDM_no_small_sigs
summary_betas
diagDM_no_small_sigs
plot_betas(diagDM_no_small_sigs)
require(ggplot2)
plot_betas(diagDM_no_small_sigs)
diagDM_no_small_sigs
#
simplified_object <- load_PCAWG("../../data/roo/Breast-AdenoCA-nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
#
simplified_object <- load_PCAWG("../../data/roo/Breast-AdenoCA_nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
#
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagRE_DM", use_nlminb=T, smart_init_vals=F)
diagDM_no_small_sigs
#
simplified_object <- load_PCAWG("../../data/roo/Lung-AdenoCA_nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
#
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagRE_DM", use_nlminb=T, smart_init_vals=F)
simplified_object
simplified_object$Y
dim(simplified_object$Y)
diagDM_no_small_sigs
.rs.restartR()
rm(list = ls())
#
simplified_object <- load_PCAWG("../../data/roo/Lung-AdenoCA_nucleotidesubstitution1_ROO.RDS",
read_directly = T,
typedata = "signaturesMSE", override_warning_X_Z = T)
simplified_object
save(simplified_object, "../../../../CompSign/data/simplified_object.rda")
save(simplified_object, file = "../../../../CompSign/data/simplified_object.rda")
#
diagDM_no_small_sigs <- wrapper_run_TMB(object = simplified_object,
model = "diagRE_DM", use_nlminb=T, smart_init_vals=F)
diagDM_no_small_sigs
dim(simplified_object$Y)
.rs.restartR()
rm(list = ls())
devtools::install_github("lm687/CompSign", build_vignettes = TRUE)
rm(list = ls())
simplified_object
rm(simplified_object)
.rs.restartR()
.rs.restartR()
