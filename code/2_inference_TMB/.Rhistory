i[grepl("^Node", i)]
}
select_leaves_name <- function(i){
i[grepl("^t", names(i))]
}
remove_last_element <- function(i){
i[-length(i)]
}
for(mut_it in 1:nmuts){
## for each mutations
## add the mutation in all samples in between the samples with the mutation
which_nodes_mutation <- which(mut_matrix[,mut_it] == 1)
## perform all traversals
for(list_combinations_leaves in combn(which_nodes_mutation, 2, simplify = F)){
leaf1 = names(list_combinations_leaves)[1]
leaf2 = names(list_combinations_leaves)[2]
common_ancestor = (all_paths_between_leaves$Node1[[leaf1]][all_paths_between_leaves$Node1[[leaf1]] %in% all_paths_between_leaves$Node1[[leaf2]]])
cat(paste0(leaf1, '->', leaf2, '\n'))
## starting from node1, go to node2
current_path <- all_paths_between_leaves[[leaf1]][[leaf2]]
## add the mutation to all the children of the inner nodes (Node1, Node2, etc)
give_children_nodes <- function(list_children, already_visited_internal){
list_children_leaves <- sort(select_leaves(list_children))
list_children_internal <- sort(select_internal(list_children))
## remove internal nodes already used
list_children_internal <- list_children_internal[!(list_children_internal %in% already_visited_internal)]
## remove blacklisted nodes which are higher than the most recent common ancestor
list_children_internal <- list_children_internal[!(list_children_internal %in% common_ancestor)]
cat(list_children_leaves, '\n')
if(length(list_children_internal)>0){
if(length(list_children_internal) > 1){
affected_nodes = names(which(colSums(adjacency_mat[names(which(apply(adjacency_mat[list_children_internal, ], 2, max) == 1)),]) > 0))
}else{
affected_nodes <- names(which(colSums(adjacency_mat[names(which(adjacency_mat[list_children_internal, ] == 1)),]) > 0))
}
## remove internal nodes already used
affected_nodes <- affected_nodes[!(affected_nodes %in% already_visited_internal)]
## remove blacklisted nodes which are higher than the most recent common ancestor
affected_nodes <- affected_nodes[!(affected_nodes %in% common_ancestor)]
already_visited_internal <- c(already_visited_internal, list_children_internal)
# affected_nodes <- c(list_children_leaves,
#                     affected_nodes)
return(unique(c(affected_nodes, give_children_nodes(affected_nodes, already_visited_internal))))
# affected_nodes
# already_visited_internal = c()
# list_children = affected_nodes
}else{
return(list_children_leaves)
}
}
affected_nodes = unique(c(paste0('t', list_combinations_leaves),
give_children_nodes(current_path[grepl('Node', current_path)], c())))
# affected_nodes
# list_children=current_path[grepl('Node', current_path)]
# already_visited_internal = c()
affected_nodes = unique(c(select_leaves(affected_nodes), affected_nodes))
mut_matrix[select_leaves(affected_nodes), mut_it] = 1
## add the mutation to the Leaves themselves
mut_matrix[current_path[!grepl('Node', current_path)],mut_it] = 1
mut_matrix
}
}
tree
par(mfrow=c(1,2))
image(mut_matrix_original, min='original')
image(mut_matrix, min='imputated')
sum(mut_matrix_original)
sum(mut_matrix)
## blue == with mutation
## green == no mutation
par(mfrow=c(3,2), mar=c(1,1,2,1))
for(mut_it in 1:30){
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix_original[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, ' Original'), show.node.label = F, show.tip.label = T)
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, " Imputed"))
}
#
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix_original[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, ' Original'), show.node.label = F, show.tip.label = T)
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, " Imputed"))
mut_matrix_original[,mut_it]
mut_matrix[,mut_it]
mut_it = 29
mut_matrix_original[,mut_it]
mut_matrix[,mut_it]
rm(list = ls())
library(ape)
library(igraph)
library(ggm)
nnodes <- 10
tree <- rtree(n = nnodes)
adjacency_mat <- as(igraph::get.adjacency(ape::as.igraph.phylo(tree, directed = F), type = 'both'), 'matrix')
diag(adjacency_mat) = 1
plot(tree)
## and given a matrix of mutations in the tree
nmuts <- 200
## create a matrix of mutations
mut_matrix_original <- matrix(sample(c(0,1), size = nnodes*nmuts, replace = T, prob = c(0.8, 0.2)), nnodes, nmuts)
rownames(mut_matrix_original) <- paste0('t', 1:nnodes)
colnames(mut_matrix_original) <- paste0('mut', 1:nmuts)
## make sure each mutation appears in at least two samples
mut_matrix_original <- mut_matrix_original[,colSums(mut_matrix_original)>= 2]
nmuts <- ncol(mut_matrix_original)
## rows are nodes, columns are mutations
mut_matrix <- mut_matrix_original
## find paths from one node to another
all_paths_between_leaves <- lapply((rownames(adjacency_mat)), function(i){
.x <- lapply((rownames(adjacency_mat)), function(j){
if(which(rownames(adjacency_mat) == j) < which(rownames(adjacency_mat) == i)){
idx1 = which(rownames(adjacency_mat) == j)
idx2 = which(rownames(adjacency_mat) == i)
}else{
idx1 = which(rownames(adjacency_mat) == i)
idx2 = which(rownames(adjacency_mat) == j)
}
rownames(adjacency_mat)[ggm::findPath(adjacency_mat, idx1, idx2)]
})
names(.x) <- (rownames(adjacency_mat))
.x
})
names(all_paths_between_leaves) <- (rownames(adjacency_mat))
#-----------------------------------------------------------------------------------------#
select_leaves <- function(i){
i[grepl("^t", i)]
}
select_internal <- function(i){
i[grepl("^Node", i)]
}
select_leaves_name <- function(i){
i[grepl("^t", names(i))]
}
remove_last_element <- function(i){
i[-length(i)]
}
## add the mutation to all the children of the inner nodes (Node1, Node2, etc)
give_children_nodes <- function(list_children, already_visited_internal){
list_children_leaves <- sort(select_leaves(list_children))
list_children_internal <- sort(select_internal(list_children))
## remove internal nodes already used
list_children_internal <- list_children_internal[!(list_children_internal %in% already_visited_internal)]
## remove blacklisted nodes which are higher than the most recent common ancestor
list_children_internal <- list_children_internal[!(list_children_internal %in% common_ancestor)]
cat(list_children_leaves, '\n')
if(length(list_children_internal)>0){
if(length(list_children_internal) > 1){
affected_nodes = names(which(colSums(adjacency_mat[names(which(apply(adjacency_mat[list_children_internal, ], 2, max) == 1)),]) > 0))
}else{
affected_nodes <- names(which(colSums(adjacency_mat[names(which(adjacency_mat[list_children_internal, ] == 1)),]) > 0))
}
## remove internal nodes already used
affected_nodes <- affected_nodes[!(affected_nodes %in% already_visited_internal)]
## remove blacklisted nodes which are higher than the most recent common ancestor
affected_nodes <- affected_nodes[!(affected_nodes %in% common_ancestor)]
already_visited_internal <- c(already_visited_internal, list_children_internal)
return(unique(c(affected_nodes, give_children_nodes(affected_nodes, already_visited_internal))))
}else{
return(list_children_leaves)
}
}
#-----------------------------------------------------------------------------------------#
for(mut_it in 1:nmuts){
## for each mutations
## add the mutation in all samples in between the samples with the mutation
which_nodes_mutation <- which(mut_matrix[,mut_it] == 1)
## perform all traversals
for(list_combinations_leaves in combn(which_nodes_mutation, 2, simplify = F)){
leaf1 = names(list_combinations_leaves)[1]
leaf2 = names(list_combinations_leaves)[2]
common_ancestor = (all_paths_between_leaves$Node1[[leaf1]][all_paths_between_leaves$Node1[[leaf1]] %in% all_paths_between_leaves$Node1[[leaf2]]])
cat(paste0(leaf1, '->', leaf2, '\n'))
## starting from node1, go to node2
current_path <- all_paths_between_leaves[[leaf1]][[leaf2]]
affected_nodes = unique(c(paste0('t', list_combinations_leaves),
give_children_nodes(current_path[grepl('Node', current_path)], c())))
affected_nodes = unique(c(select_leaves(affected_nodes), affected_nodes))
mut_matrix[select_leaves(affected_nodes), mut_it] = 1
## add the mutation to the Leaves themselves
mut_matrix[current_path[!grepl('Node', current_path)],mut_it] = 1
}
}
par(mfrow=c(1,2))
image(mut_matrix_original, min='original')
image(mut_matrix, min='imputated')
sum(mut_matrix_original)
sum(mut_matrix)
## blue == with mutation
## green == no mutation
par(mfrow=c(3,2), mar=c(1,1,2,1))
for(mut_it in 1:30){
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix_original[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, ' Original'), show.node.label = F, show.tip.label = T)
plot(tree, tip.col=c('green', 'blue')[factor(select_leaves_name(mut_matrix[,mut_it])[tree$tip.label], levels=c(0,1))], cex=1.5, main=paste0(mut_it, " Imputed"))
}
library(grid)
library(gridExtra)
library(dendextend)
library(ggrepel)
library(cowplot)
library(compositions)
library(CompSign)
library(QDNAseq)
library(Biobase)
library(RColorBrewer)
library(dplyr)
library(tidyverse)
library(MASS)
library(pheatmap)
library(ggdendro)
library(readxl)
library(CNTools)
library(GenomicRanges)
require(ggthemr)
# source("../../../../other_repos/BriTROC-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../cnsignatures/main_functions.R")
source("../../cnsignatures/helper_functions.R")
source("helper_functions.R")
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
chrlen = readRDS("data/chrlen.RDS")
give_short_names = function(i){
if(grepl('TCGA', i)){
paste0(strsplit(i, split = '-')[[1]][1:3], collapse='-')
}else{
i
}
}
clr_vec <- function(x){
log(x) - mean(log(x))
}
clr_mat <- function(X){
.res <- t(apply(X, 1, clr_vec))
stopifnot(dim(.res) == dim(X))
.res
}
normalise_rw <- function(x){
if(is.null(dim(x))){
x/sum(x)
}else{
## normalise row-wise
sweep(x, 1, rowSums(x), '/')
}
}
org<- as(readRDS("data/organoid_exposures.rds"), 'matrix')
# rownames(org) <- paste0('Sample ', 1:nrow(org))
# names_orgs = readxl::read_xlsx("data/NewOrganoidNaming.xlsx")
names_orgs = read_csv("data/NewOrganoidNaming.csv")
# rownames(org) <- paste0('Sample ', 1:nrow(org))
# names_orgs = readxl::read_xlsx("data/NewOrganoidNaming.xlsx")
names_orgs = read_csv("data/NewOrganoidNaming.csv")
names_orgs$`new name`[match(rownames(org), paste0(names_orgs$`old name`, 'org'))]
rownames(org) = names_orgs$`new name`[match(rownames(org), paste0(names_orgs$`old name`, 'org'))]
natgen = natgen_metadata = list()
sig_data = readRDS("data/sig_data_unorm.RDS")
sig_data = cbind(sweep(sig_data[,1:7], 1, rowSums(sig_data[,1:7]), '/'),
sig_data[,8:ncol(sig_data)])
natgen[[1]] <- as.matrix(sig_data[,1:7])
createBarplot(natgen[[1]])
natgen_metadata[[1]] <- sig_data[,8:10]
natgen[[2]] <- readRDS("data/Export-matrix_OV_Sigs_on_TCGA-OV_12112019.rds")
natgen_metadata[[2]] <- cbind.data.frame(study=rep('Updated TCGA', nrow(natgen[[2]])), age=NA, age.cat=NA, stringsAsFactors = FALSE, row.names=rownames(natgen[[2]]))
names(natgen_metadata) = names(natgen) = c('ExposuresNatGen', 'UpdatedExposures')
#------------ Only keep TCGA samples which are of good enough quality------------#
summary_ascat = read.table("data/summary.ascatTCGA.penalty70.txt", header = TRUE, stringsAsFactors = FALSE)
good_tcga = summary_ascat$name[summary_ascat$dCIN]
good_tcga = good_tcga[!is.na(good_tcga)]
bool_tcga= lapply(natgen, function(i) grepl('TCGA', rownames(i)))
rm_na = function(df) !apply(df, 1, function(rw) all(is.na(rw)))
## modify the dataframes
for(version in 1:2){
rm_bad_samples = !(sapply(rownames(natgen[[version]])[bool_tcga[[version]]], give_short_names) %in% good_tcga)
natgen[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen[[version]] = natgen[[version]][rm_na(natgen[[version]]),]
natgen_metadata[[version]][bool_tcga[[version]],][ rm_bad_samples,] <- NA
natgen_metadata[[version]] = natgen_metadata[[version]][rm_na(natgen_metadata[[version]]),]
}
rownames(natgen[[1]]) = as.character(sapply(rownames(natgen[[1]]), give_short_names))
#------------ add the non-TCGA samples to natgen2 ------------#
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
bool_tcga_metadata = lapply(natgen_metadata, function(i) grepl('TCGA', rownames(i))) ## re-compute
natgen[[2]] = rbind(natgen[[2]], natgen[[1]][!bool_tcga[[1]],])
natgen_metadata[[2]] = rbind(natgen_metadata[[2]], natgen_metadata[[1]][!bool_tcga[[1]],])
stopifnot(dim(natgen[[2]])[1] == dim(natgen_metadata[[2]])[1])
bool_tcga = lapply(natgen, function(i) grepl('TCGA', rownames(i))) ## re-compute
getwd()
present1 <- natgen$ExposuresNatGen > 0.05
present2 <- natgen$UpdatedExposures > 0.05
mean_cooc_1 <- outer(1:7, 1:7, Vectorize(function(i,j) {
mean(apply(present1[,c(i,j)], 1, all))
}))
mean_cooc_1
i=j=1
mean(apply(present1[,c(i,j)], 1, all))
present1[,c(i,j)]
mean(apply(present1[,c(i,j)], 1, function(k) k[1] == k[2] ))
mean_cooc_1 <- outer(1:7, 1:7, Vectorize(function(i,j) {
mean(apply(present1[,c(i,j)], 1, function(k) k[1] == k[2] ))
}))
mean_cooc_2 <- outer(1:7, 1:7, Vectorize(function(i,j) {
mean(apply(present2[,c(i,j)], 1, all))
}))
colnames(mean_cooc_2) <- rownames(mean_cooc_2) <- colnames(mean_cooc_1) <- rownames(mean_cooc_1) <- paste0('s', 1:7)
ph1 <- pheatmap(mean_cooc_1, main='Old exposures')
ph2 <- pheatmap(mean_cooc_2, main = 'Updated exposures')
pdf("../../../other_repos/Vias_Brenton/copy_number_analysis_organoids/figures/coocurrence_signatures.pdf", height = 3.3)
cowplot::plot_grid(plotlist = list(ph1[[4]],ph2[[4]]))
dev.off()
pdf("/Users/morril01/Documents/PhD/other_repos/Vias_Brenton/copy_number_analysis_organoids/figures/coocurrence_signatures.pdf", height = 3.3)
cowplot::plot_grid(plotlist = list(ph1[[4]],ph2[[4]]))
dev.off()
mean_cooc_2 <- outer(1:7, 1:7, Vectorize(function(i,j) {
mean(apply(present2[,c(i,j)], 1, function(k) k[1] == k[2] ))
}))
colnames(mean_cooc_2) <- rownames(mean_cooc_2) <- colnames(mean_cooc_1) <- rownames(mean_cooc_1) <- paste0('s', 1:7)
ph1 <- pheatmap(mean_cooc_1, main='Old exposures')
ph2 <- pheatmap(mean_cooc_2, main = 'Updated exposures')
pdf("/Users/morril01/Documents/PhD/other_repos/Vias_Brenton/copy_number_analysis_organoids/figures/coocurrence_signatures.pdf", height = 3.3)
cowplot::plot_grid(plotlist = list(ph1[[4]],ph2[[4]]))
dev.off()
illllr <- compositions::ilrBase()
illllr <- compositions::ilrBase(2)
illllr <- compositions::ilrBase(4)
illllr
illllr <- compositions::ilrBase(D = 4)
illllr
illllr %*% t(illllr)
t(illllr) %*% illllr
xs1 <- c(0.2, 0.7, 0.1)
xs2 <- c(0.3, 0.7, 0.2)
sum(xs1)
sum(xs2)
xs2 <- c(0.3, 0.6, 0.1)
sum(xs2)
xs1/xs2
var(log(xs1/xs2))
var(log(xs2/xs1))
var(log(xs1/xs2))
var(log(xs2/xs1))
a <- compositions::ilrBase(D=4)
a
t(a)%*%a
##-----------------------------------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
##-----------------------------------------------------------------------------------------------------##
source("../2_inference_TMB/helper_TMB.R")
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
source("../3_analysis/recovery_COSMIC_signatures/recover_COSMIC_signatures.R")
library(TMB)
library(ggrepel)
library(cowplot)
library(gridExtra)
library(dplyr)
library(jcolors)
library(viridis)
library(mutSigExtractor)
##-----------------------------------------------------------------------------------------------------##
enough_samples = read.table("../../data/restricted/pcawg/CT_sufficient_samples.txt", comment.char='#')[,1]
enough_samples
nucleotide_colours_logR <- c('C$>$A/T$>$G'= '#3cb371', 'C$>$G/T$>$G'= '#90ee90', 'C$>$T/T$>$G'= '#66cdaa',
'T$>$A/T$>$G'= '#cd5c5c', 'T$>$C/T$>$G'= '#f4a460')
nucleotide_colours <- c('C>A' = '#3cb371', 'C>G'= '#90ee90', 'C>T'= '#66cdaa',
'T>A'= '#cd5c5c', 'T>C'= '#f4a460', 'T>G'='red')
nucleotide_colours_dollar <- c('C$>$A' = '#3cb371', 'C$>$G'= '#90ee90', 'C$>$T'= '#66cdaa',
'T$>$A'= '#cd5c5c', 'T$>$C'= '#f4a460', 'T$>$G'='red')
##-----------------------------------------------------------------------------------------------------##
read_info <- function(ct){
.x <- list(#fullRE_M_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREM_", ct, "_signaturesPCAWG.RDS"))),
#fullRE_DMSL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambda_", ct, "_signaturesPCAWG.RDS"))),
#fullRE_M_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREMnonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullRE_DMSL_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS"))),
#diagRE_DMDL_nonexo_SP =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMnonexo_", ct, "_signaturesPCAWG.RDS"))),
#diagRE_DMDL_wSBS1SBS5nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMwSBS1SBS5nonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMnoscaling_SP_nonexo =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMnoscaling_SP_nonexo_subsets_and_amalgamations <- try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexosubset_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMonefixedlambdanonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMonefixedlambda2nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambda2nonexo_", ct, "_signaturesPCAWG.RDS"))),
#fullREDMonefixedlambdanonexo_SPSaA = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWGSaA.RDS"))),
#fullREM_MSE = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREM_", ct, "_signaturesMSE.RDS"))),
#fullREDM_MSE = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDM_", ct, "_signaturesMSE.RDS"))),
fullREDM_nucleotide1 = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDM_", ct, "_nucleotidesubstitution1.RDS"))),
#diagREDM_MSE = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDM_", ct, "_signaturesMSE.RDS"))),
#dataset_all_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../data/", load_all_sigs = T, override_warning_X_Z = T),
dataset_active_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../data/", override_warning_X_Z = T),
dataset_nucleotidesubstitution1 = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution1", path_to_data = "../../data/", override_warning_X_Z = T)
#dataset_nucleotidesubstitution3 = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution3", path_to_data = "../../data/", override_warning_X_Z = T),
#dataset_nucleotidesubstitution3MSE = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution3MSE", path_to_data = "../../data/", override_warning_X_Z = T),
#dataset_active_sigs_MSE = load_PCAWG(ct = ct, typedata = "signaturesMSE", path_to_data = "../../data/", load_all_sigs = F, override_warning_X_Z = T),
#DMM = list(z_DMM=lapply(1:8, function(k) try(read.table(paste0("../../data/roo_for_DMM_SPpcawg/DMM_output/", ct, "_signaturesPCAWG_all", k, "_dmm.z"), sep = ',', skip = 1))),
#            fit_DMM = lapply(1:8, function(k) try(read.table(paste0("../../data/roo_for_DMM_SPpcawg/DMM_output/", ct, "_signaturesPCAWG_all", k, "_dmm.fit"), sep = ' '))))
)
return(.x)
}
##-----------------------------------------------------------------------------------------------------##
read_info_list <- lapply(enough_samples, read_info)
names(read_info_list) <- enough_samples
##-----------------------------------------------------------------------------------------------------##
source("../3_analysis/helper/pcawg.colour.palette.R")
pcawg_palette <- pcawg.colour.palette(x = gsub("\\..*", "", names(read_info_list)),  scheme = "tumour.subtype")
names(pcawg_palette) <- names(read_info_list)
diagRE_DMDL <- lapply(read_info_list, function(i) i$diagRE_DMDL_SP)
nucleotide1 <- sapply(read_info_list, `[`, 'fullREDM_nucleotide1')
names(nucleotide1) <- names(read_info_list)
names_trinucleotide <- vector_cats_to_logR(colnames(read_info_list[[1]]$dataset_nucleotidesubstitution1$Y))
betas_nucleotides <- lapply(nucleotide1, function(i) plot_betas(i, return_df = T))
betas_nucleotides <- lapply(betas_nucleotides, function(i){
i$LogR <- names_trinucleotide[i$LogR]
# rownames(i) <- make.names(i$LogR, unique = T)
i
})
betas_nucleotides_slopes <- do.call('cbind', lapply(betas_nucleotides, function(i) i%>% filter(type_beta == 'Slope' ) %>% select(Estimate)))
colnames(betas_nucleotides_slopes) <- names(nucleotide1)
rownames(betas_nucleotides_slopes) <- names_trinucleotide
rownames(betas_nucleotides_slopes) <- gsub(">", "$>$", rownames(betas_nucleotides_slopes))
# tikzDevice::tikz("../../results/results_TMB/pcawg/reports_per_cancer_type/cors_trinucleotide3sorted_v2.tex", height = 3, width = 5)
ggplot(melt(as(betas_nucleotides_slopes, 'matrix')),
aes(x=factor(Var2,levels=names(sort(colMeans(betas_nucleotides_slopes)))),
col=Var1, y=value))+geom_point()+
geom_hline(yintercept = 0, lty='dashed')+theme_bw()+geom_line(aes(group=Var1))+
theme_bw()+theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1))+
theme(axis.title.x = element_blank(), legend.position = "bottom", legend.title = element_blank())+
# labs(y=("$\\widehat{\\betab}_1$"))+
labs(y=("$\\hat{\\beta}_1$"))+
guides(col=guide_legend(nrow=1,byrow=TRUE))+
scale_color_manual(values = nucleotide_colours_logR)
betas_nucleotides_slopes
cor(betas_nucleotides_slopes)
cor(t(betas_nucleotides_slopes))
betas_nucleotides_slopes
betas_nucleotides_slopes_softmax <- apply(betas_nucleotides_slopes, 2, function(i) softmax(c(i,0)))
betas_nucleotides_slopes_softmax
nucleotide_colours_logR
nucleotide_colours
names(nucleotide_colours)
rownames(betas_nucleotides_slopes_softmax) <- names(nucleotide_colours)
betas_nucleotides_slopes_softmax
ovrdisp <- do.call('rbind.data.frame', lapply(1:length(diagRE_DMDL), try(function(idx){
if(diagRE_DMDL[[idx]]$pdHess){
cbind.data.frame( plot_lambdas(diagRE_DMDL[[idx]], return_df=T, plot=F), ct=names(diagRE_DMDL)[idx])
}else{
c(NA, NA)
}
})))
cor(t(betas_nucleotides_slopes_softmax))
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
rownames(betas_nucleotides_slopes_softmax) <- names(nucleotide_colours_dollar)
tikzDevice::tikz(file ="../../results/results_TMB/pcawg/betas_nucleotides_slopes_softmax_cor.pdf",
width=7, height = 8)
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
dev.off()
dev.off()
dev.off()
tikzDevice::tikz(file ="../../results/results_TMB/pcawg/betas_nucleotides_slopes_softmax_cor.pdf",
width=7, height = 8)
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
dev.off()
system("open ../../results/results_TMB/pcawg/")
dev.off()
tikzDevice::tikz(file ="../../results/results_TMB/pcawg/betas_nucleotides_slopes_softmax_cor.tex",
width=7, height = 8)
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
dev.off()
tikzDevice::tikz(file ="../../results/results_TMB/pcawg/betas_nucleotides_slopes_softmax_cor.tex",
width=7, height = 8)
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
dev.off()
dev.off()
tikzDevice::tikz(file ="../../results/results_TMB/pcawg/betas_nucleotides_slopes_softmax_cor.tex",
width=3, height = 3)
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
dev.off()
tikzDevice::tikz(file ="../../results/results_TMB/pcawg/betas_nucleotides_slopes_softmax_cor.tex",
width=3.5, height = 3)
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
dev.off()
dev.off()
tikzDevice::tikz(file ="../../results/results_TMB/pcawg/betas_nucleotides_slopes_softmax_cor.tex",
width=3.2, height = 3)
pheatmap::pheatmap(cor(t(betas_nucleotides_slopes_softmax)))
dev.off()
table(apply(dcast(ovrdisp, formula = ct~name, value.var=c('Estimate')), 1, function(i) i[2] > i[3]))
head(dcast(ovrdisp, formula = ct~name, value.var=c('Estimate')))
which(differential_precision_2 <= 0.05) ## which are differentially overdispersed
# ovrdisp$differentially_abundant = ifelse(ovrdisp$ct %in% names(differential_precision[(differential_precision <= 0.05)]), yes = '*', no = '')
differential_precision_2 <- p.adjust(sapply(diagRE_DMDL, ttest_TMB_wrapper_overdisp), method = 'fdr')
names(differential_precision_2) <- names(diagRE_DMDL)
which(differential_precision_2 <= 0.05) ## which are differentially overdispersed
length(which(differential_precision_2 <= 0.05))
# tikzDevice::tikz("../../results/results_TMB/pcawg/reports_per_cancer_type/cors_trinucleotide3sorted_v2.tex", height = 3, width = 5)
ggplot(melt(as(betas_nucleotides_slopes, 'matrix')),
aes(x=factor(Var2,levels=names(sort(colMeans(betas_nucleotides_slopes)))),
col=Var1, y=value))+geom_point()+
geom_hline(yintercept = 0, lty='dashed')+theme_bw()+geom_line(aes(group=Var1))+
theme_bw()+theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1))+
theme(axis.title.x = element_blank(), legend.position = "bottom", legend.title = element_blank())+
# labs(y=("$\\widehat{\\betab}_1$"))+
labs(y=("$\\hat{\\beta}_1$"))+
guides(col=guide_legend(nrow=1,byrow=TRUE))+
scale_color_manual(values = nucleotide_colours_logR)
file.exists('../../results/results_TMB/pcawg/reports_per_cancer_type/cors_trinucleotide3sorted_v3.tex')
dev.off()
tikzDevice::tikz("../../results/results_TMB/pcawg/reports_per_cancer_type/cors_trinucleotide3sorted_v3.tex", height = 4, width = 5)
ggplot(melt(as(betas_nucleotides_slopes, 'matrix')),
aes(x=factor(Var2,levels=names(sort(colMeans(betas_nucleotides_slopes)))),
col=Var1, y=value))+geom_point()+
geom_hline(yintercept = 0, lty='dashed')+theme_bw()+geom_line(aes(group=Var1))+
theme_bw()+theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1))+
theme(axis.title.x = element_blank(), legend.position = "bottom", legend.title = element_blank())+
# labs(y=("$\\widehat{\\betab}_1$"))+
labs(y=("$\\hat{\\beta}_1$"))+
guides(col=guide_legend(nrow=1,byrow=TRUE))+
scale_color_manual(values = nucleotide_colours_logR)
dev.off()
system("open ../../results/results_TMB/pcawg/reports_per_cancer_type/")
