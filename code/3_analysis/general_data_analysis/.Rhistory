alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(unlist(log_L))
}
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
c_n
#Log likelihood of GC sequence under the model in (1)
forward_algorithm_scaled<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(unlist(log_L))
}
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n<-exp(c_n)
c_n
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
c_n_arg <- c_n
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
c_n_arg
c_n
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
beta_hat
N
#initialization
mu_0<-c(0.5,0.5)
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-length(emitted_sequences)
t=1
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,trans_mat,emission_mat,mu_0)
c_n<-forward_algorithm_scaled(emitted_sequences,trans_mat,emission_mat,mu_0)
beta_hat<-backward_algorithm_scaled(emitted_sequences,hidden_values,emission_mat,trans_mat,c_n)
log_likelihood<-sum(c_n)
mu_0<-alpha_hat[1,] * trans_mat %*% emission_mat[,visible_data[1],drop=FALSE]*beta_hat[1,]
mu_0
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,trans_mat,emission_mat,mu_0)
c_n<-forward_algorithm_scaled(emitted_sequences,trans_mat,emission_mat,mu_0)
beta_hat<-backward_algorithm_scaled(emitted_sequences,hidden_values,emission_mat,trans_mat,c_n)
log_likelihood<-sum(c_n)
mu_0<-alpha_hat[1,] * trans_mat %*% emission_mat[,visible_data[1],drop=FALSE]*beta_hat[1,]
A <- matrix(c(0.8,  0.2, 0.1, 0.9), ncol=2, byrow=T)
mu_naught = c(0.5,0.5)
B=matrix(c(0.2 , 0.5 , 0.2 , 0.1 , 0,
0 , 0.1 , 0.4 , 0.4 , 0.1), nrow=2, byrow=T)
S <- 1:2
V <- 1:5
#Setting the seed for consistency and number of values
set.seed(99)
L<-115
#sequences of hidden states
s1<-sample(S,size=1,replace=TRUE,prob=mu_naught)
hidden_values<-rep(NA,L)
temp<-hidden_values[1]<-s1
for (i in 2:L){
hidden_values[i]<-sample(S,size=1,replace=TRUE,prob=A[temp,])
temp<-hidden_values[i]
}
hidden_values
## Emitted values
#sequences of emitted states
emitted_values<-rep(NA,L)
for (i in 1:L){
emitted_values[i]<-sample(V,size=1,replace=TRUE,prob=B[hidden_values[i],])
}
emitted_values
plot(emitted_values, type='h')
## Plot the resulting sequences of hidden and emitted states on the same graph.
#plots sequences of hidden and emitted states on the same graph
#pdf("Graph1.pdf")
opar <- par(no.readonly = TRUE)
par(mar = c(4, 4.1, 4.8, 2.1))
plot(emitted_values,type="h",xlim=c(0,115),xlab="",xaxt="n",ylab="",col='blue',lwd=1.5)
lines(hidden_values,col='red',lwd=2,type = "h")
axis(1, at = seq(0, 115, by = 10))
axis(1, at = seq(0, 115, 5), labels = NA)
title(xlab = "Index",font.lab=2,mgp = c(2.5, 1, 0))    # Add x-axis text
title(ylab = "Sequence of state",font.lab=2,mgp = c(2.5, 1, 0))    # Add y-axis text
legend(x="top", inset=c(0, -0.3),
legend = c("emitted state","hidden state"),col=c("blue","red"),lwd=c(1.5,2),xpd=TRUE, horiz = TRUE)
#creates a csv file for 115 sequences
data<-data.frame(cbind(hidden_values,emitted_values))
forward_algorithm<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
alpha[1,]<-initial_distribution*emission_matrix[,visible_data[1]]
for (i in 2:(no_emitted_values)){
transitted<-alpha[(i-1),] %*% transition_matrix
alpha[i,]<-transitted*emission_matrix[,visible_data[i]]
}
return(alpha)
}
# forward_algorithm(values$emitted_values,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
forward_algorithm(emitted_values,A,B,mu_naught)
#Log likelihood of GC sequence under the model in (1)
forward_algorithm_scaled<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(unlist(log_L))
}
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
emitted_sequences <- c(1,1,2,4,5)
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
c_n_arg <- c_n
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)+1
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
alpha_hat
baum_welch<-function(emitted_sequences,hidden_values){
#initialization
mu_0<-c(0.5,0.5)
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
#iteration
for (t in 1:N){
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,trans_mat,emission_mat,mu_0)
c_n<-forward_algorithm_scaled(emitted_sequences,trans_mat,emission_mat,mu_0)
beta_hat<-backward_algorithm_scaled(emitted_sequences,hidden_values,emission_mat,trans_mat,c_n)
log_likelihood<-sum(c_n)
mu_0<-alpha_hat[1,] * trans_mat %*% emission_mat[,visible_data[1],drop=FALSE]*beta_hat[1,]
E_nij<-matrix(0,2,2)
for (m in 1:N){
E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
}
trans_mat<-apply(E_nij,1,function(x) x/colSums(E_nij))
emission_mat<-rep(NA,1)
}
#termination
}
# E_nij<-matrix(0,2,2)
# for (m in 1:N){
#   E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
# }
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
## sum the number of times that we see the transition from k to l in the observed data
sum_over_j_i <- matrix(NA, ncol=ncol(alpha_hat), nrow=length(emitted_sequences))
sum_over_j_i
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
f[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
length(emitted_sequences)
sum(sapply(1:(length(emitted_sequences)-1)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
ncol(alpha_hat)
(length(emitted_sequences)-1)
sum(sapply(1:(length(emitted_sequences)-1), function(i)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
visible_data=rep(1,5)
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
beta_hat
alpha_hat
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sum(sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]}))
}
}
A
alpha_hat
alpha_hat[length(emitted_sequences]
alpha_hat[length(emitted_sequences)]
alpha_hat[length(emitted_sequences),]
A
onesigma <- rbind(c(1694, 1726, 28.90),
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma
head(melt(onesigma))
require(reshape2)
head(melt(onesigma))
head(melt(onesigma)onesigma)
onesigma
colnames(onesigma) <- c('start', 'end', 'onesigma')
require(ggplot2)
ggplot(onesigma, aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
data.frame(onesigma)
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(xmin=start, xend=end, ymin=0, yend=onesigma))+geom_ribbon()
onesigma
onesigma[1,'start']:onesigma[1,'end']
lapply(1:nrow(onesigma), function(i) (onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) rbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))_
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma'])))
onesigma
head(onesigma)
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
ggplot(data.frame(onesigma), aes(xmin=start, x=end, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, y=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), col=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), fill=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, fill=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_step()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_errorbar()
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library('GEOquery')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library('GEOquery')
gse <- getGEO("GSE165897", GSEMatrix = TRUE)
show(gse)
gse$`GSE165897-GPL16791_series_matrix.txt.gz`
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$taxid_ch1
gse$`GSE165897-GPL16791_series_matrix.txt.gz`$geo_accession
filePaths = getGEOSuppFiles("GSE165897")
pvals_diagRE_DMDL_nonexo_SP_adj
pvals_fullRE_DMSL_nonexo_SP_adj
# rstudioapi() is not allowed in running shiny apps
# setwd(dirname(rstudioapi::getSourceEditorContext()$path)) ## set working directory
rm(list = ls()) ## clear objects
library(visNetwork) ## interactive network visualisation package
library(viridisLite) ## colour package
set.seed(234) # 'random' number generator
version = '' # default
metadata_file = paste0("in_files/metadata", version, ".txt")
edges_file = paste0("in_files/dataframe_edges", version, ".txt")
out_file = paste0("html_files", version, ".html")
## Reading in data files
# note: source files (metadata.txt, dataframe_edges.txt) need identical name entries (ordering doesn't matter)
metadata = read.table(metadata_file, stringsAsFactors = FALSE, sep = "\t", comment.char = "#", quote = '"')
library(YAPSA)
library(BSgenome.Hsapiens.UCSC.hg19)
data(lymphoma_test)
data(lymphoma_cohort_LCD_results)
data(sigs)
word_length <- 3
temp_list <- create_mutation_catalogue_from_df(
lymphoma_test_df,this_seqnames.field = "CHROM",
this_start.field = "POS",this_end.field = "POS",
this_PID.field = "PID",this_subgroup.field = "SUBGROUP",
this_refGenome = BSgenome.Hsapiens.UCSC.hg19,
this_wordLength = word_length)
lymphoma_catalogue_df <- temp_list$matrix
lymphoma_PIDs <- colnames(lymphoma_catalogue_df)
data("lymphoma_cohort_LCD_results")
lymphoma_exposures_df <-
lymphoma_Nature2013_COSMIC_cutoff_exposures_df[, lymphoma_PIDs]
lymphoma_sigs <- rownames(lymphoma_exposures_df)
lymphoma_sig_df <- AlexCosmicValid_sig_df[, lymphoma_sigs]
confIntExp(in_ind = 1, in_sigLevel = 0.05, in_delta = 0.4,
in_exposure_vector = lymphoma_exposures_df[, 1],
in_catalogue_vector = lymphoma_catalogue_df[, 1],
in_sig_df = lymphoma_sig_df)
lymphoma_catalogue_df
lymphoma_exposures_df
ci <- confIntExp(in_ind = 1, in_sigLevel = 0.05, in_delta = 0.4,
in_exposure_vector = lymphoma_exposures_df[, 1],
in_catalogue_vector = lymphoma_catalogue_df[, 1],
in_sig_df = lymphoma_sig_df)
ci
lymphoma_exposures_df[, 1]
lymphoma_catalogue_df[, 1]
lymphoma_sig_df
lymphoma_sig_df
rm(list = ls())
load("data/two_normal_pops.rda")
library(compositions)
library(CompSign)
col_vec <- brewer.pal(n = 8, name = "Set2")
## simulated data with different implementations of the overdispersion parameter
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(1234)
library(compositions)
library(HMP)
source("../../2_inference_TMB/helper_TMB.R")
a <- runif(100); b <- a+runif(100, min = -0.4, max=0.2); sigma <- cov(cbind(a,b))
sigma
beta <- rbind(c(0.5, 0.6), c(0.3, -1))
## simulate log-ratios
n <- 1000
## sample random intercepts
u <- mvtnorm::rmvnorm(n, mean=c(0,0), sigma = sigma)
x <- cbind(1, c(rep(0, n),rep(1, n)))
z <- give_z_matrix(n*2)
logR <- x %*% beta + z %*% u
probs <- softmax(cbind(logR, 0))
plot(compositions::acomp(probs), col=factor(x[,2]))
Nm <- rpois(n*2, lambda = 90)
Nm_b <- rpois(n*2, lambda = 25)
hist(Nm)
system("open ../../../results/models_explanatory/")
