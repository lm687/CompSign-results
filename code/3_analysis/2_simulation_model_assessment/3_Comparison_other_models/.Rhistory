cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 0.2), nrow=4)
dev.off()
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png", height = 5, width = 20, units = 'cm', res = 200)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 0.2), nrow=4)
dev.off()
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png", height = 12, width = 30, units = 'cm', res = 200)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 0.2), nrow=4)
dev.off()
length(rep(1:4, each=rep(round(nrow(all_diagREDMDL_betas_df_with_estimate)/4))))
dim(all_diagREDMDL_betas_df_with_estimate)
# all_diagREDMDL_betas_df_with_estimate$L1_rows = all_diagREDMDL_betas_df_with_estimate$L1 %in% unique(all_diagREDMDL_betas_df_with_estimate$L1)[1:12]
# png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facets.png", height = 12, width = 20, units = 'cm', res = 200)
# plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows)),
#           plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(!L1_rows)),
#           cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows), return_legend = T)), rel_heights = c(1, 1, 0.2), nrow=3)
# dev.off()
.tab_rows <- table(all_diagREDMDL_betas_df_with_estimate$L1, c(rep(1:4, each=rep(round(nrow(all_diagREDMDL_betas_df_with_estimate)/4)))[-1]))
all_diagREDMDL_betas_df_with_estimate$L1_rows = apply(.tab_rows, 1, which.max)[match(all_diagREDMDL_betas_df_with_estimate$L1, names(apply(.tab_rows, 1, which.max)))]
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 0.2), nrow=4)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=4)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png", height = 12, width = 30, units = 'cm', res = 200)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png", height = 18, width = 30, units = 'cm', res = 200)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png", height = 25, width = 30, units = 'cm', res = 200)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
plot_row_sorted_betas <- function(df, return_legend=F){
a <- ggplot(df,
aes(x=idx_in_ct, y=Estimate, col=signature_to_col(numerator_LogR),
shape=signature_to_col(numerator_LogR)))+
geom_line(aes(group=L1))+
geom_point()+
geom_errorbar(aes(ymin=Estimate-`Std. Error`, ymax=Estimate+`Std. Error`))+
scale_color_manual(values=c('black', '#FFC107', '#C86518'))+
facet_wrap(.~L1_rows, nrow=2)+
facet_grid(.~L1, scales='free', space='free_x', switch="both" )+
theme(legend.position = 'bottom')+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(y=TeX(r"($\hat{\beta_1}$)"), col='Signature', shape='Signature')
if(return_legend){
a
}else{
a+guides(col='none', shape='none')
}
}
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
plot_row_sorted_betas <- function(df, return_legend=F){
a <- ggplot(df,
aes(x=idx_in_ct, y=Estimate, col=signature_to_col(numerator_LogR),
shape=signature_to_col(numerator_LogR)))+
geom_line(aes(group=L1))+
geom_point()+
geom_errorbar(aes(ymin=Estimate-`Std. Error`, ymax=Estimate+`Std. Error`))+
scale_color_manual(values=c('black', '#FFC107', '#C86518'))+
facet_wrap(.~L1_rows, nrow=2)+
facet_grid(.~L1, scales='free', space='free_x', switch="right" )+
theme(legend.position = 'bottom')+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(y=TeX(r"($\hat{\beta_1}$)"), col='Signature', shape='Signature')
if(return_legend){
a
}else{
a+guides(col='none', shape='none')
}
}
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
plot_row_sorted_betas <- function(df, return_legend=F){
a <- ggplot(df,
aes(x=idx_in_ct, y=Estimate, col=signature_to_col(numerator_LogR),
shape=signature_to_col(numerator_LogR)))+
geom_line(aes(group=L1))+
geom_point()+
geom_errorbar(aes(ymin=Estimate-`Std. Error`, ymax=Estimate+`Std. Error`))+
scale_color_manual(values=c('black', '#FFC107', '#C86518'))+
facet_wrap(.~L1_rows, nrow=2)+
facet_grid(.~L1, scales='free', space='free_x')+
theme(legend.position = 'bottom')+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
labs(y=TeX(r"($\hat{\beta_1}$)"), col='Signature', shape='Signature')
if(return_legend){
a
}else{
a+guides(col='none', shape='none')
}
}
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png", height = 25, width = 31, units = 'cm', res = 200)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
dev.off()
dev.off()
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
height = 25, width = 32, units = 'cm', res = 200)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
height = 25, width = 32, units = 'cm', res = 200)
pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
height = 25, width = 32)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
# png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
#     height = 25, width = 32, units = 'cm', res = 200)
pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.pdf",
height = 25, width = 32)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
height = 25, width = 32, units = 'cm', res = 200)
# pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.pdf",
#     height = 25, width = 32)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
# png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
#     height = 25, width = 32, units = 'cm', res = 200)
pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.pdf",
height = 15, width = 20)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
# png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
#     height = 25, width = 32, units = 'cm', res = 200)
pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.pdf",
height = 15, width = 16)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
# png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
#     height = 25, width = 32, units = 'cm', res = 200)
pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.pdf",
height = 15, width = 14)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
32/25
32/25*14
32/25
25/32*14
# png("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.png",
#     height = 25, width = 32, units = 'cm', res = 200)
pdf("../../../results/results_TMB/pcawg/betas_comparing_with_SBS1_SBS5_line_stderror_facetsv2.pdf",
height = 10.9375, width = 14)
plot_grid(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 2)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 3)),
plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 4)),
cowplot::get_legend(plot_row_sorted_betas(all_diagREDMDL_betas_df_with_estimate %>% filter(L1_rows == 1), return_legend = T)),
rel_heights = c(1, 1, 1, 1, 0.2), nrow=5)
dev.off()
##------------------------------------------------------------------------##
rm(list = ls())
setwd("~/Documents/other/PhD/DM/CompSign-results/code/3_analysis/2_simulation_model_assessment/3_Comparison_other_models/")
library(CompSign)
library(HiLDA)
library(ggplot2)
library(lsa) ## cosine similarity
library(reshape2)
library(dplyr)
library(GGally)
library(gridExtra)
theme_set(theme_bw())
##------------------------------------------------------------------------##
##------------------------------------------------------------------------##
add_metadata <- function(df, vector_from_DA_with_runname){
df$params = sapply(vector_from_DA_with_runname, function(i) paste0(strsplit(i, '_')[[1]][1:6], collapse = '_'))
df$model = sapply(vector_from_DA_with_runname, function(i) strsplit(i, '_')[[1]][1])
df$n = sapply(vector_from_DA_with_runname, function(i) strsplit(i, '_')[[1]][2])
df$nlambda = sapply(vector_from_DA_with_runname, function(i) strsplit(i, '_')[[1]][3])
df$pi = as.numeric(sapply(vector_from_DA_with_runname, function(i) strsplit(i, '_')[[1]][6]))
return(df)
}
get_inference_files <- function(folder_in, verbose=T){
in_files <- unlist(sapply(grep('GenerationMixtureSimulation_|GenerationMixtureSimulationv4_|GenerationMixtureSimulationv7_|GenerationMixtureSimulationTwoCT',
list.files(folder_in, full.names = T),
value = T),
list.files, full.names = T))
## there are the results from inference and the time it took for these models to run - select only the results
in_files <- grep('.RDS', in_files, value = T)
if(verbose){
cat(length(in_files), ' files found\n')
}
all_out_TMB <- lapply(in_files, readRDS)
names(all_out_TMB) <- paste0(gsub(".RDS", "",
gsub("multiple_GenerationMixtureSimulation", "", basename(in_files))))
names(all_out_TMB) <-  gsub("diagREDM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("TCSM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("HilDA_NA_NA_NA_dataset", "", names(all_out_TMB))
return(all_out_TMB)
}
# get_dataset_files <- function(folder_in){
#   in_files <- unlist(sapply(grep('GenerationMixtureSimulationv4|GenerationMixtureSimulationv7|GenerationMixtureSimulationTwoCT|GenerationMixtureSimulation_',
#                                  list.files(folder_in, full.names = T),
#                                  value = T),
#                             list.files, full.names = T))
#
#   ## there are the results from inference and the time it took for these models to run - select only the results
#   in_files <- grep('.RDS', in_files, value = T)
#
#   all_out_TMB <- lapply(in_files, readRDS)
#   names(all_out_TMB) <- paste0(gsub(".RDS", "",
#                                     gsub("multiple_GenerationMixtureSimulation", "", basename(in_files))))
#   names(all_out_TMB) <-  gsub("diagREDM_NA_NA_NA_dataset", "", names(all_out_TMB))
#   names(all_out_TMB) <-  gsub("TCSM_NA_NA_NA_dataset", "", names(all_out_TMB))
#   names(all_out_TMB) <-  gsub("HilDA_NA_NA_NA_dataset", "", names(all_out_TMB))
#   return(all_out_TMB)
# }
##------------------------------------------------------------------------##
##------------------------------------------------------------------------##
# all_in_datasets <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/datasets/")
##------------------------------------------------------------------------##
##------------------------------------------------------------------------##
## Rename the datasets
rename_datasets_vec = c('TwoCT'= 'C1', 'v7'='C2', 'v4' = 'C3')
rename_datasets_fun <- function(i){
for(k in 1:length(rename_datasets_vec)){
i <- gsub(names(rename_datasets_vec)[k], rename_datasets_vec[k], x = i)
}
if(grepl('^_', i)){
## dataset from generation GenerationMixtureSimulation -- add the number of mutations as real
## they belong to Generation C3 (they are equivalent to v4, as there is patient-specific information)
i = gsub('^_', 'C3_', i)
isplit <- strsplit(i, '_')[[1]]
isplit[3] <- 'Obs'
i = paste0(isplit, collapse = '_')
}
i
}
##------------------------------------------------------------------------##
##------------------------------------------------------------------------##
## TMB
all_out_TMB <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/")
all_out_TMB <- all_out_TMB[-grep('_NC', names(all_out_TMB))]
names(all_out_TMB) <- sapply(names(all_out_TMB), rename_datasets_fun)
names(all_out_TMB)
pvals <- sapply(all_out_TMB, wald_TMB_wrapper)
max(pvals, na.rm = T)
min(pvals, na.rm = T)
df_pvals <- data.frame(pvals_TMB = pvals, DA_TMB=pvals <= 0.05,
pi_softmax=sapply(as.numeric(sapply(names(pvals), function(i) strsplit(i, '_')[[1]][6])), function(i) softmax(c(i, 0))[1]),
pi=as.numeric(sapply(names(pvals), function(i) strsplit(i, '_')[[1]][6])),
numsamples=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][2]),
numsmuts=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][3]),
datasetgeneration=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][1]))
ggplot(df_pvals, aes(x=factor(pi, levels=sort(unique(df_pvals$pi))), fill=factor(DA_TMB)))+geom_bar()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+facet_wrap(.~interaction(numsamples, numsmuts, datasetgeneration))
ggplot(df_pvals, aes(x=factor(round(pi_softmax, 3), levels=sort(unique(round(df_pvals$pi_softmax, 3)))), fill=factor(DA_TMB)))+geom_bar()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+facet_wrap(.~interaction(numsamples, numsmuts, datasetgeneration))
ggplot(df_pvals %>% group_by(pi_softmax, pi, numsamples, numsmuts, datasetgeneration) %>%
summarise(frac_DA=mean(DA_TMB, na.rm = T)),
aes(x=factor(round(pi_softmax, 3), levels=sort(unique(round(df_pvals$pi_softmax, 3)))),
y = frac_DA, group=interaction( numsamples, numsmuts, datasetgeneration),
col = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', '),
shape = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', ')))+
geom_vline(xintercept = '0.007', lty=4, alpha=0.4)+
geom_line()+geom_point()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
facet_wrap(.~interaction(datasetgeneration))+
labs(x=latex2exp::TeX('$\\pi$'), y='Fraction of DA runs')+
labs(col='Parameter combination', shape='Parameter combination')+
theme(legend.position = 'bottom')+
scale_color_manual(values = c('#004D40', '#C86518', '#3270BB', '#A7BBAD', '#7D0B1B'))
ggsave("../../../../results/figures_paper/comparison_methods/TMB_fraction_DA.pdf", height = 3.5, width = 8)
# geom_rect(data=df_pvals[1,], aes(xmin=-Inf, xmax='0.007', ymin=-Inf, ymax=Inf, fill='red'), alpha=0.02)
df_pvals$datasetnotDA = df_pvals$pi_softmax < 0.01
df_pvals_parameter_expand = expand.grid(apply(df_pvals[,c('numsamples', 'numsmuts', 'datasetgeneration')], 2, unique, simplify = F))
pval_thresholds
rm(list = ls())
##' Compare TMB models where signatures are extracted using the set of active signatures (ground truth)
##' from the simulation, or selecting active signatures based on other strategies
rm(list = ls())
library(CompSign)
library(reshape2)
source("../../../2_inference_TMB/helper_TMB.R")
all_res_TMB_default <- grep('GenerationMixtureSimulationv6', list.dirs("../data/assessing_models_simulation/inference_results/TMB/nlminb/", full.names = T), value = T)
all_files_default <- unlist(sapply(all_res_TMB_default, list.files, full.name=T))
all_files_default <- grep('.RDS', all_files_default, value = T) ## do not read in runtime files
all_res_TMB_with_sigextract <- grep('GenerationMixtureSimulationv6', list.dirs("../data/assessing_models_simulation/inference_results/TMB_with_sigextract/nlminb/", full.names = T), value = T)
all_files_sigextract <- unlist(sapply(all_res_TMB_with_sigextract, list.files, full.name=T))
all_files_sigextract <- grep('.RDS', all_files_sigextract, value = T) ## do not read in runtime files
files_list = list(diagREDMsigextraction1 = grep('diagREDMsigextraction1',
all_files_sigextract, value = T),
diagREDMsigextraction2 = grep('diagREDMsigextraction2',
all_files_sigextract, value = T),
diagREDMsigextraction3 = grep('diagREDMsigextraction3',
all_files_sigextract, value = T),
diagREDM = grep('diagREDM', all_files_default, value = T))
## match files
match1 <- gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction1", "", files_list$diagREDMsigextraction1))
files_list$diagREDMsigextraction1 ## unchanged
files_list$diagREDMsigextraction2 <- files_list$diagREDMsigextraction2[match(match1, gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction2", "", files_list$diagREDMsigextraction2)))]
files_list$diagREDMsigextraction3 <- files_list$diagREDMsigextraction3[match(match1, gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction3", "", files_list$diagREDMsigextraction3)))]
files_list$diagREDM <- as.vector(files_list$diagREDM[match(match1, gsub("TMB", "", gsub("diagREDM", "", files_list$diagREDM)))])
idx_to_remove = rowSums(sapply(files_list, is.na)) > 0
idx_to_remove
idx_to_remove = rowSums(sapply(files_list, is.na)) > 0
idx_to_remove
files_list
rm(list = ls())
library(CompSign)
library(reshape2)
source("../../../2_inference_TMB/helper_TMB.R")
all_res_TMB_default <- grep('GenerationMixtureSimulationv6', list.dirs("../data/assessing_models_simulation/inference_results/TMB/nlminb/", full.names = T), value = T)
all_files_default <- unlist(sapply(all_res_TMB_default, list.files, full.name=T))
all_files_default <- grep('.RDS', all_files_default, value = T) ## do not read in runtime files
all_res_TMB_with_sigextract <- grep('GenerationMixtureSimulationv6', list.dirs("../data/assessing_models_simulation/inference_results/TMB_with_sigextract/nlminb/", full.names = T), value = T)
all_files_sigextract <- unlist(sapply(all_res_TMB_with_sigextract, list.files, full.name=T))
all_files_sigextract <- grep('.RDS', all_files_sigextract, value = T) ## do not read in runtime files
files_list = list(diagREDMsigextraction1 = grep('diagREDMsigextraction1',
all_files_sigextract, value = T),
diagREDMsigextraction2 = grep('diagREDMsigextraction2',
all_files_sigextract, value = T),
diagREDMsigextraction3 = grep('diagREDMsigextraction3',
all_files_sigextract, value = T),
diagREDM = grep('diagREDM', all_files_default, value = T))
## match files
match1 <- gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction1", "", files_list$diagREDMsigextraction1))
files_list$diagREDMsigextraction1 ## unchanged
files_list$diagREDMsigextraction2 <- files_list$diagREDMsigextraction2[match(match1, gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction2", "", files_list$diagREDMsigextraction2)))]
files_list$diagREDMsigextraction3 <- files_list$diagREDMsigextraction3[match(match1, gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction3", "", files_list$diagREDMsigextraction3)))]
files_list$diagREDM <- as.vector(files_list$diagREDM[match(match1, gsub("TMB", "", gsub("diagREDM", "", files_list$diagREDM)))])
match1
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(CompSign)
library(reshape2)
source("../../../2_inference_TMB/helper_TMB.R")
all_res_TMB_default <- grep('GenerationMixtureSimulationv6', list.dirs("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/", full.names = T), value = T)
all_files_default <- unlist(sapply(all_res_TMB_default, list.files, full.name=T))
all_files_default <- grep('.RDS', all_files_default, value = T) ## do not read in runtime files
all_res_TMB_with_sigextract <- grep('GenerationMixtureSimulationv6', list.dirs("../../../../data/assessing_models_simulation/inference_results/TMB_with_sigextract/nlminb/", full.names = T), value = T)
all_files_sigextract <- unlist(sapply(all_res_TMB_with_sigextract, list.files, full.name=T))
all_files_sigextract <- grep('.RDS', all_files_sigextract, value = T) ## do not read in runtime files
files_list = list(diagREDMsigextraction1 = grep('diagREDMsigextraction1',
all_files_sigextract, value = T),
diagREDMsigextraction2 = grep('diagREDMsigextraction2',
all_files_sigextract, value = T),
diagREDMsigextraction3 = grep('diagREDMsigextraction3',
all_files_sigextract, value = T),
diagREDM = grep('diagREDM', all_files_default, value = T))
## match files
match1 <- gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction1", "", files_list$diagREDMsigextraction1))
files_list$diagREDMsigextraction1 ## unchanged
files_list$diagREDMsigextraction2 <- files_list$diagREDMsigextraction2[match(match1, gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction2", "", files_list$diagREDMsigextraction2)))]
files_list$diagREDMsigextraction3 <- files_list$diagREDMsigextraction3[match(match1, gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction3", "", files_list$diagREDMsigextraction3)))]
files_list$diagREDM <- as.vector(files_list$diagREDM[match(match1, gsub("TMB", "", gsub("diagREDM", "", files_list$diagREDM)))])
idx_to_remove = rowSums(sapply(files_list, is.na)) > 0
for(i in 1:length(files_list)){
files_list[[i]] <- files_list[[i]][!idx_to_remove]
}
stopifnot(all.equal(gsub("diagREDMsigextraction1", "", files_list$diagREDMsigextraction1), gsub("diagREDMsigextraction2", "", files_list$diagREDMsigextraction2)))
stopifnot(all.equal(gsub("diagREDMsigextraction1", "", files_list$diagREDMsigextraction1), gsub("diagREDMsigextraction3", "", files_list$diagREDMsigextraction3)))
stopifnot(all.equal(gsub("TMB_with_sigextract", "", gsub("diagREDMsigextraction1", "", files_list$diagREDMsigextraction1)), gsub("TMB", "", gsub("diagREDM", "", files_list$diagREDM))))
files_read <- lapply(files_list, function(i){x <- lapply(i, readRDS); names(x) <- basename(i); x})
pvals <- lapply(files_read, function(i) sapply(i, wald_TMB_wrapper))
pvals_df = do.call('cbind.data.frame', pvals)
pvals_df$pi = as.numeric(sapply(basename(files_list$diagREDM), function(i) strsplit(i, '_')[[1]][7]))
pvals_df$pi_softmax=sapply(pvals_df$pi, function(i) softmax(c(i,0))[1])
empty_to_NA <- function(i){ sapply(i, function(j) if(length(j) == 0){NA}else{j}) }
pvals_df2 <- data.frame(pvals=unlist(pvals),
d = unlist(lapply(files_read, function(i) empty_to_NA(sapply(i, function(j) 1+length(python_like_select_name(j$par.fixed, 'beta'))/2)))),
pi = as.numeric(unlist(lapply(files_read, function(j) sapply(basename(names(j)), function(k) strsplit(k, '_')[[1]][7])))),
variable=rep(names(pvals), sapply(pvals, length)))
pvals_df2$pi_softmax=sapply(pvals_df2$pi, function(i) softmax(c(i,0))[1])
pvals_df = melt(pvals_df, id.vars = c('pi', 'pi_softmax'))
pvals_df <- pvals_df[!is.na(pvals_df$value),]
pvals_df$datasetnotDA = pvals_df$pi_softmax < 0.01
pvals_df_summary = pvals_df %>% group_by(pi, variable, datasetnotDA) %>% summarise(frac_DA=sum(value <= 0.05)/n())
pvals_df_summary$accuracy = sapply(1:nrow(pvals_df_summary), function(j){
if(pvals_df_summary$datasetnotDA[j]){
## not DA
1-pvals_df_summary$frac_DA[j]
}else{
pvals_df_summary$frac_DA[j]
}})
ggplot(pvals_df_summary, aes(x=pi, col=variable, y=frac_DA))+geom_line()
ggplot(pvals_df_summary, aes(x=pi, col=variable, y=accuracy))+geom_line()
pvals_df$datasetnotDA
ggplot(pvals_df, aes(x=))
aucs <- lapply(names(files_list), function(model_it){
.x <- sapply(pval_thresholds, function(pval_threshold_it){
get_sensivity_specificity(pvals_df, model = model_it,
pval_threshold = pval_threshold_it)
})
colnames(.x) <- pval_thresholds
.x
})
names(aucs) <- names(files_list)
aucs = dcast(melt(aucs), L1+Var2~Var1, value.var = 'value')
rename_sigextraction <- function(i){
res <- sapply(i, function(j){
if(j == 'diagREDM'){
return('Simulated signatures')
}else if(j == 'diagREDMsigextraction1'){
return('Signatures sum > 80% exposures')
}else if(j == 'diagREDMsigextraction2'){
return('Signatures sum > 70% exposures')
}else if(j == 'diagREDMsigextraction3'){
return('Signatures active > 80% samples')
}else{
stop()
}
})
return(res)
}
aucs$L1 <- rename_sigextraction(aucs$L1)
plt1 <- ggplot(aucs, aes(x=TPR, y=FPR, col=L1))+geom_line()+
scale_color_manual(values = c('#377eb8', '#ff7f00', '#984ea3', 'red'))+
labs(col='Signature extraction strategy')
plt1
plt1 <- ggplot(aucs, aes(y=TPR, x=FPR, col=L1))+geom_line()+
scale_color_manual(values = c('#377eb8', '#ff7f00', '#984ea3', 'red'))+
labs(col='Signature extraction strategy')
plt1
plt1 <- ggplot(aucs, aes(x=TPR, y=FPR, col=L1))+geom_line()+
scale_color_manual(values = c('#377eb8', '#ff7f00', '#984ea3', 'red'))+
labs(col='Signature extraction strategy')
plt1
