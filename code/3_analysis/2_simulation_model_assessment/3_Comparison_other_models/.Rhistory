##------------------------------------------------------------------------##
## TMB
all_out_TMB <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/")
all_out_TMB <- all_out_TMB[-grep('_NC', names(all_out_TMB))]
names(all_out_TMB) <- sapply(names(all_out_TMB), rename_datasets_fun)
names(all_out_TMB) <- sapply(names(all_out_TMB), rename_datasets_fun)
names(all_out_TMB)
pvals <- sapply(all_out_TMB, wald_TMB_wrapper)
max(pvals, na.rm = T)
min(pvals, na.rm = T)
df_pvals <- data.frame(pvals_TMB = pvals, DA_TMB=pvals <= 0.05,
pi_softmax=sapply(as.numeric(sapply(names(pvals), function(i) strsplit(i, '_')[[1]][6])), function(i) softmax(c(i, 0))[1]),
pi=as.numeric(sapply(names(pvals), function(i) strsplit(i, '_')[[1]][6])),
numsamples=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][2]),
numsmuts=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][3]),
datasetgeneration=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][1]))
ggplot(df_pvals, aes(x=factor(pi, levels=sort(unique(df_pvals$pi))), fill=factor(DA_TMB)))+geom_bar()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+facet_wrap(.~interaction(numsamples, numsmuts, datasetgeneration))
library(ggplot2)
ggplot(df_pvals, aes(x=factor(pi, levels=sort(unique(df_pvals$pi))), fill=factor(DA_TMB)))+geom_bar()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+facet_wrap(.~interaction(numsamples, numsmuts, datasetgeneration))
ggplot(df_pvals, aes(x=factor(round(pi_softmax, 3), levels=sort(unique(round(df_pvals$pi_softmax, 3)))), fill=factor(DA_TMB)))+geom_bar()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+facet_wrap(.~interaction(numsamples, numsmuts, datasetgeneration))
ggplot(df_pvals %>% group_by(pi_softmax, pi, numsamples, numsmuts, datasetgeneration) %>%
summarise(frac_DA=mean(DA_TMB, na.rm = T)),
aes(x=factor(round(pi_softmax, 3), levels=sort(unique(round(df_pvals$pi_softmax, 3)))),
y = frac_DA, group=interaction( numsamples, numsmuts, datasetgeneration),
col = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', '),
shape = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', ')))+
geom_vline(xintercept = '0.007', lty=4, alpha=0.4)+
geom_line()+geom_point()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
facet_wrap(.~interaction(datasetgeneration))+
labs(x=latex2exp::TeX('$\\pi$'), y='Fraction of DA runs')+
labs(col='Parameter combination', shape='Parameter combination')+
theme(legend.position = 'bottom')+
scale_color_manual(values = c('#004D40', '#C86518', '#3270BB', '#A7BBAD', '#7D0B1B'))
df_pvals$datasetnotDA = df_pvals$pi_softmax < 0.01
df_pvals_parameter_expand = expand.grid(apply(df_pvals[,c('numsamples', 'numsmuts', 'datasetgeneration')], 2, unique, simplify = F))
pval_thresholds
give_AUC_df <- function(df_pvals, df_pvals_parameter_expand, column_pvalues_arg, pval_thresholds_arg=pval_thresholds, remove_NA=T, ...){
aucs_TMB <- apply(df_pvals_parameter_expand, 1, function(parameter_combination){
.x <- sapply(pval_thresholds_arg, function(pval_threshold_it){
input_df = df_pvals %>% filter(numsamples == parameter_combination[1],
numsmuts == parameter_combination[2],
datasetgeneration == parameter_combination[3])
if(nrow(input_df) == 0){
return(c(NA, NA))
}else{
get_sensivity_specificity(pvals_df = input_df,
model = NULL,
pval_threshold = pval_threshold_it,
not_subset_df = T, column_pvalues = column_pvalues_arg, ...)
}
})
colnames(.x) <- pval_thresholds_arg
.x
}, simplify = F)
names(aucs_TMB) <- apply(df_pvals_parameter_expand, 1, paste0, collapse='_')
aucs_TMB = dcast(melt(aucs_TMB), L1+Var2~Var1, value.var = 'value')
aucs_TMB$numsamples =  sapply(aucs_TMB$L1, function(i) strsplit(i, '_')[[1]][1])
aucs_TMB$numsmuts =  sapply(aucs_TMB$L1, function(i) strsplit(i, '_')[[1]][2])
aucs_TMB$datasetgeneration =  sapply(aucs_TMB$L1, function(i) strsplit(i, '_')[[1]][3])
if(remove_NA) aucs_TMB <- aucs_TMB[!is.na(aucs_TMB$FPR),]
return(aucs_TMB)
}
give_AUC_plot <- function(df_AUC){
ggplot(df_AUC,
aes(y=TPR, x=FPR,
col = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', '),
shape = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', ')
))+geom_line()+geom_point()+
labs(y='TPR', x='FPR')+
labs(col='Parameter combination', shape='Parameter combination')+
theme(legend.position = 'bottom')+
scale_color_manual(values = c('#004D40', '#C86518', '#3270BB', '#A7BBAD', '#7D0B1B'))+
facet_wrap(.~datasetgeneration)
}
aucs_TMB <- give_AUC_df(df_pvals, df_pvals_parameter_expand, column_pvalues_arg = 'pvals_TMB')
give_AUC_plot(aucs_TMB %>% filter(datasetgeneration != 'C2'))
##------------------------------------------------------------------------##
## HiLDA
all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T)
##------------------------------------------------------------------------##
## HiLDA
all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T)
get_inference_files
##------------------------------------------------------------------------##
## HiLDA
all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T)
##------------------------------------------------------------------------##
## HiLDA
all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T)
##------------------------------------------------------------------------##
## TCSM
all_out_TCSM <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TCSM/")
get_inference_files
##------------------------------------------------------------------------##
get_inference_files <- function(folder_in, verbose=T, remove_HiLDAGlobal=F, runtime=F, return_filenames=F){
in_files <- unlist(sapply(grep('GenerationMixtureSimulation_|GenerationMixtureSimulationv4_|GenerationMixtureSimulationv7_|GenerationMixtureSimulationTwoCT',
list.files(folder_in, full.names = T),
value = T),
list.files, full.names = T))
## there are the results from inference and the time it took for these models to run - select only the results
if(runtime){
in_files <- grep('.time', in_files, value = T)
}else{
in_files <- grep('.RDS', in_files, value = T)
}
if(remove_HiLDAGlobal){ in_files <- in_files[grep("HiLDA_", in_files)]}
if(verbose){
cat(length(in_files), ' files found\n')
}
if(runtime){
all_out_TMB <- lapply(in_files, function(j){
if(grepl('.time', j) & grepl('TCSM', j)){
read.table(j)
}else{
readRDS(j)
}
})
}else{
if(return_filenames){
all_out_TMB <- in_files
}else{
all_out_TMB <- lapply(in_files, readRDS)
}
}
names(all_out_TMB) <- paste0(gsub(".RDS", "",
gsub("multiple_GenerationMixtureSimulation", "", basename(in_files))))
names(all_out_TMB) <-  gsub("diagREDM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("TCSM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("HilDA_NA_NA_NA_dataset", "", names(all_out_TMB))
return(all_out_TMB)
}
##------------------------------------------------------------------------##
names_out_TMB <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/", return_filenames = T)
names_out_TMB
all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/", remove_HiLDAGlobal = T, return_filenames = T)
##------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(CompSign)
library(HiLDA)
##------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(CompSign)
library(HiLDA)
library(ggplot2)
library(lsa) ## cosine similarity
library(reshape2)
library(dplyr)
library(GGally)
library(gridExtra)
theme_set(theme_bw())
source("../../../2_inference_TMB/helper_TMB.R")
source("helper.R")
##------------------------------------------------------------------------##
names_out_TMB <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/", return_filenames = T)
names_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/", remove_HiLDAGlobal = T, return_filenames = T)
names_out_TCSM <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TCSM/", return_filenames = T)
rename_datasets_fun
names_out_HiLDA
names_out_TCSM[1]
names_out_HiLDA[1]
##------------------------------------------------------------------------##
modify_names_HiLDA <- function(j){
sapply(j, function(i){
i <- sapply(i, rename_datasets_fun)
i <- paste0(gsub("HiLDA.*", "", i), gsub(".*dataset", "", i))
return(i)
})
}
names_out_HiLDA <- modify_names_HiLDA(get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/", remove_HiLDAGlobal = T, return_filenames = T))
names_out_HiLDA
xxxx=get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T,return_filenames = T)
xxxx
##------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(CompSign)
library(HiLDA)
##------------------------------------------------------------------------##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(CompSign)
# library(HiLDA)
library(ggplot2)
# library(lsa) ## cosine similarity
library(reshape2)
library(dplyr)
library(GGally)
library(gridExtra)
theme_set(theme_bw())
source("../../../2_inference_TMB/helper_TMB.R")
source("helper.R")
##------------------------------------------------------------------------##
names_out_TMB <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/", return_filenames = T)
names_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/", remove_HiLDAGlobal = T, return_filenames = T)
names_out_TCSM <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TCSM/", return_filenames = T)
##------------------------------------------------------------------------##
## TMB
all_out_TMB <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/")
# 1283  files found
all_out_TMB <- all_out_TMB[-grep('_NC', names(all_out_TMB))]
names(all_out_TMB) <- sapply(names(all_out_TMB), rename_datasets_fun)
names(all_out_TMB)
pvals <- sapply(all_out_TMB, wald_TMB_wrapper)
max(pvals, na.rm = T)
min(pvals, na.rm = T)
df_pvals <- data.frame(pvals_TMB = pvals, DA_TMB=pvals <= 0.05,
pi_softmax=sapply(as.numeric(sapply(names(pvals), function(i) strsplit(i, '_')[[1]][6])), function(i) softmax(c(i, 0))[1]),
pi=as.numeric(sapply(names(pvals), function(i) strsplit(i, '_')[[1]][6])),
numsamples=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][2]),
numsmuts=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][3]),
datasetgeneration=sapply(names(pvals), function(i) strsplit(i, '_')[[1]][1]))
ggplot(df_pvals, aes(x=factor(pi, levels=sort(unique(df_pvals$pi))), fill=factor(DA_TMB)))+geom_bar()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+facet_wrap(.~interaction(numsamples, numsmuts, datasetgeneration))
ggplot(df_pvals, aes(x=factor(round(pi_softmax, 3), levels=sort(unique(round(df_pvals$pi_softmax, 3)))), fill=factor(DA_TMB)))+geom_bar()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+facet_wrap(.~interaction(numsamples, numsmuts, datasetgeneration))
ggplot(df_pvals %>% group_by(pi_softmax, pi, numsamples, numsmuts, datasetgeneration) %>%
summarise(frac_DA=mean(DA_TMB, na.rm = T)),
aes(x=factor(round(pi_softmax, 3), levels=sort(unique(round(df_pvals$pi_softmax, 3)))),
y = frac_DA, group=interaction( numsamples, numsmuts, datasetgeneration),
col = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', '),
shape = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', ')))+
geom_vline(xintercept = '0.007', lty=4, alpha=0.4)+
geom_line()+geom_point()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
facet_wrap(.~interaction(datasetgeneration))+
labs(x=latex2exp::TeX('$\\pi$'), y='Fraction of DA runs')+
labs(col='Parameter combination', shape='Parameter combination')+
theme(legend.position = 'bottom')+
scale_color_manual(values = c('#004D40', '#C86518', '#3270BB', '#A7BBAD', '#7D0B1B'))
df_pvals$datasetnotDA = df_pvals$pi_softmax < 0.01
df_pvals_parameter_expand = expand.grid(apply(df_pvals[,c('numsamples', 'numsmuts', 'datasetgeneration')], 2, unique, simplify = F))
pval_thresholds
give_AUC_df <- function(df_pvals, df_pvals_parameter_expand, column_pvalues_arg, pval_thresholds_arg=pval_thresholds, remove_NA=T, ...){
aucs_TMB <- apply(df_pvals_parameter_expand, 1, function(parameter_combination){
.x <- sapply(pval_thresholds_arg, function(pval_threshold_it){
input_df = df_pvals %>% filter(numsamples == parameter_combination[1],
numsmuts == parameter_combination[2],
datasetgeneration == parameter_combination[3])
if(nrow(input_df) == 0){
return(c(NA, NA))
}else{
get_sensivity_specificity(pvals_df = input_df,
model = NULL,
pval_threshold = pval_threshold_it,
not_subset_df = T, column_pvalues = column_pvalues_arg, ...)
}
})
colnames(.x) <- pval_thresholds_arg
.x
}, simplify = F)
names(aucs_TMB) <- apply(df_pvals_parameter_expand, 1, paste0, collapse='_')
aucs_TMB = dcast(melt(aucs_TMB), L1+Var2~Var1, value.var = 'value')
aucs_TMB$numsamples =  sapply(aucs_TMB$L1, function(i) strsplit(i, '_')[[1]][1])
aucs_TMB$numsmuts =  sapply(aucs_TMB$L1, function(i) strsplit(i, '_')[[1]][2])
aucs_TMB$datasetgeneration =  sapply(aucs_TMB$L1, function(i) strsplit(i, '_')[[1]][3])
if(remove_NA) aucs_TMB <- aucs_TMB[!is.na(aucs_TMB$FPR),]
return(aucs_TMB)
}
give_AUC_plot <- function(df_AUC){
ggplot(df_AUC,
aes(y=TPR, x=FPR,
col = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', '),
shape = interaction( paste0('n=', numsamples), paste0('T=', numsmuts), sep = ', ')
))+geom_line()+geom_point()+
labs(y='TPR', x='FPR')+
labs(col='Parameter combination', shape='Parameter combination')+
theme(legend.position = 'bottom')+
scale_color_manual(values = c('#004D40', '#C86518', '#3270BB', '#A7BBAD', '#7D0B1B'))+
facet_wrap(.~datasetgeneration)
}
aucs_TMB <- give_AUC_df(df_pvals, df_pvals_parameter_expand, column_pvalues_arg = 'pvals_TMB')
give_AUC_plot(aucs_TMB %>% filter(datasetgeneration != 'C2'))
##------------------------------------------------------------------------##
## HiLDA
all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T)
get_inference_files <- function(folder_in, verbose=T, remove_HiLDAGlobal=F, runtime=F, return_filenames=F, HiLDA_return='all'){
in_files <- unlist(sapply(grep('GenerationMixtureSimulation_|GenerationMixtureSimulationv4_|GenerationMixtureSimulationv7_|GenerationMixtureSimulationTwoCT',
list.files(folder_in, full.names = T),
value = T),
list.files, full.names = T))
## there are the results from inference and the time it took for these models to run - select only the results
if(runtime){
in_files <- grep('.time', in_files, value = T)
}else{
in_files <- grep('.RDS', in_files, value = T)
}
if(remove_HiLDAGlobal){ in_files <- in_files[grep("HiLDA_", in_files)]}
if(verbose){
cat(length(in_files), ' files found\n')
}
if(runtime){
all_out_TMB <- lapply(in_files, function(j){
if(grepl('.time', j) & grepl('TCSM', j)){
read.table(j)
}else{
readRDS(j)
}
})
}else{
if(return_filenames){
all_out_TMB <- in_files
}else{
if(HiLDA_return == 'all'){
all_out_TMB <- lapply(in_files, readRDS)
}else if (HiLDA_return == 'betas'){
all_out_TMB <- lapply(in_files, function(i){
x = readRDS(i)
output_to_beta_matrix(i,  model='HiLDA')
})
}
}
}
names(all_out_TMB) <- paste0(gsub(".RDS", "",
gsub("multiple_GenerationMixtureSimulation", "", basename(in_files))))
names(all_out_TMB) <-  gsub("diagREDM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("TCSM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("HilDA_NA_NA_NA_dataset", "", names(all_out_TMB))
return(all_out_TMB)
}
get_inference_files <- function(folder_in, verbose=T, remove_HiLDAGlobal=F, runtime=F, return_filenames=F, HiLDA_return='all'){
in_files <- unlist(sapply(grep('GenerationMixtureSimulation_|GenerationMixtureSimulationv4_|GenerationMixtureSimulationv7_|GenerationMixtureSimulationTwoCT',
list.files(folder_in, full.names = T),
value = T),
list.files, full.names = T))
## there are the results from inference and the time it took for these models to run - select only the results
if(runtime){
in_files <- grep('.time', in_files, value = T)
}else{
in_files <- grep('.RDS', in_files, value = T)
}
if(remove_HiLDAGlobal){ in_files <- in_files[grep("HiLDA_", in_files)]}
if(verbose){
cat(length(in_files), ' files found\n')
}
if(runtime){
all_out_TMB <- lapply(in_files, function(j){
if(grepl('.time', j) & grepl('TCSM', j)){
read.table(j)
}else{
readRDS(j)
}
})
}else{
if(return_filenames){
all_out_TMB <- in_files
}else{
if(HiLDA_return == 'all'){
all_out_TMB <- lapply(in_files, readRDS)
}else if (HiLDA_return == 'betas'){
all_out_TMB <- sapply(in_files, function(i){
x = readRDS(i)
output_to_beta_matrix(i,  model='HiLDA')
}, simplify = F)
}
}
}
names(all_out_TMB) <- paste0(gsub(".RDS", "",
gsub("multiple_GenerationMixtureSimulation", "", basename(in_files))))
names(all_out_TMB) <-  gsub("diagREDM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("TCSM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("HilDA_NA_NA_NA_dataset", "", names(all_out_TMB))
return(all_out_TMB)
}
get_inference_files <- function(folder_in, verbose=T, remove_HiLDAGlobal=F, runtime=F, return_filenames=F, HiLDA_return='all'){
in_files <- unlist(sapply(grep('GenerationMixtureSimulation_|GenerationMixtureSimulationv4_|GenerationMixtureSimulationv7_|GenerationMixtureSimulationTwoCT',
list.files(folder_in, full.names = T),
value = T),
list.files, full.names = T))
## there are the results from inference and the time it took for these models to run - select only the results
if(runtime){
in_files <- grep('.time', in_files, value = T)
}else{
in_files <- grep('.RDS', in_files, value = T)
}
if(remove_HiLDAGlobal){ in_files <- in_files[grep("HiLDA_", in_files)]}
if(verbose){
cat(length(in_files), ' files found\n')
}
if(runtime){
all_out_TMB <- lapply(in_files, function(j){
if(grepl('.time', j) & grepl('TCSM', j)){
read.table(j)
}else{
readRDS(j)
}
})
}else{
if(return_filenames){
all_out_TMB <- in_files
}else{
if(HiLDA_return == 'all'){
all_out_TMB <- lapply(in_files, readRDS)
}else if (HiLDA_return == 'betas'){
all_out_TMB <- sapply(in_files, function(i){
x = readRDS(i)
output_to_beta_matrix(i,  model='HiLDA')
}, simplify = F)
}else{
stop('<HiLDA_return> not found\n')
}
}
}
names(all_out_TMB) <- paste0(gsub(".RDS", "",
gsub("multiple_GenerationMixtureSimulation", "", basename(in_files))))
names(all_out_TMB) <-  gsub("diagREDM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("TCSM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("HilDA_NA_NA_NA_dataset", "", names(all_out_TMB))
return(all_out_TMB)
}
##------------------------------------------------------------------------##
## HiLDA
# all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
#                                      remove_HiLDAGlobal = T)
all_out_HiLDA_betas <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T, HiLDA_return='betas')
output_to_beta_matrix <- function(output, model){
## get the beta coefficients for each type of input data
if(length(output) == 0){
return(NA)
}else{
if(model =='TCSM'){
return_obj <- output$effect
}else if(model == 'TMB'){
return_obj <- plot_betas(output, return_df = T, plot = F)
return_obj <- dcast(return_obj, LogR~type_beta, value.var = 'Estimate')[,-1]
}else if(model == 'HiLDA'){
return_obj <- data.frame(output$BUGSoutput$summary) %>% slice(grep('alpha', row.names(.)))
return_obj <- matrix((return_obj$mean), ncol=2, byrow=T)
return_obj <- cbind(return_obj[,1], return_obj[,2]-return_obj[,1])
}
return(return_obj)
}
}
##------------------------------------------------------------------------##
## HiLDA
# all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
#                                      remove_HiLDAGlobal = T)
all_out_HiLDA_betas <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T, HiLDA_return='betas')
get_inference_files <- function(folder_in, verbose=T, remove_HiLDAGlobal=F, runtime=F, return_filenames=F, HiLDA_return='all'){
in_files <- unlist(sapply(grep('GenerationMixtureSimulation_|GenerationMixtureSimulationv4_|GenerationMixtureSimulationv7_|GenerationMixtureSimulationTwoCT',
list.files(folder_in, full.names = T),
value = T),
list.files, full.names = T))
## there are the results from inference and the time it took for these models to run - select only the results
if(runtime){
in_files <- grep('.time', in_files, value = T)
}else{
in_files <- grep('.RDS', in_files, value = T)
}
if(remove_HiLDAGlobal){ in_files <- in_files[grep("HiLDA_", in_files)]}
if(verbose){
cat(length(in_files), ' files found\n')
}
if(runtime){
all_out_TMB <- lapply(in_files, function(j){
if(grepl('.time', j) & grepl('TCSM', j)){
read.table(j)
}else{
readRDS(j)
}
})
}else{
if(return_filenames){
all_out_TMB <- in_files
}else{
if(HiLDA_return == 'all'){
all_out_TMB <- lapply(in_files, readRDS)
}else if (HiLDA_return == 'betas'){
all_out_TMB <- sapply(in_files, function(i){
x = readRDS(i)
output_to_beta_matrix(x,  model='HiLDA')
}, simplify = F)
}else{
stop('<HiLDA_return> not found\n')
}
}
}
names(all_out_TMB) <- paste0(gsub(".RDS", "",
gsub("multiple_GenerationMixtureSimulation", "", basename(in_files))))
names(all_out_TMB) <-  gsub("diagREDM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("TCSM_NA_NA_NA_dataset", "", names(all_out_TMB))
names(all_out_TMB) <-  gsub("HilDA_NA_NA_NA_dataset", "", names(all_out_TMB))
return(all_out_TMB)
}
##------------------------------------------------------------------------##
## HiLDA
# all_out_HiLDA <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
#                                      remove_HiLDAGlobal = T)
all_out_HiLDA_betas <- get_inference_files(folder_in = "../../../../data/assessing_models_simulation/inference_results/HiLDA/",
remove_HiLDAGlobal = T, HiLDA_return='betas')
names(all_out_HiLDA_betas)
modify_names_HiLDA(names(all_out_HiLDA) )
modify_names_HiLDA(names(all_out_HiLDA_betas) )
# 800  files found
names(all_out_HiLDA_betas) <- modify_names_HiLDA(names(all_out_HiLDA_betas))
## globaltest for hildaglobal runs
df_pvals_HiLDA <- sapply(all_out_HiLDA, hildaGlobal_from_beta)
hildaGlobal_from_beta
all_out_HiLDA_betas[[1]]
