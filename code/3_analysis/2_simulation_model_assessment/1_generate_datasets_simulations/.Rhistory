saveRDS(x, file = flename2)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
it=200
for(i in 1:it){
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,ncol(  attr(x$objects_counts, "count_matrices_all")[[1]]):1]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,ncol(  attr(x$objects_counts, "count_matrices_all")[[2]]):1]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,ncol(x$alphabar):1] ## this we know as it is in the simplex and not LR space
x$W <- x$W[,ncol(x$W):1]
flename2 <- gsub('GenerationJnorm', 'GenerationJnormInv', flename)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
}
cat('Iteration: ', i, '/', it)
i=0
cat('Iteration: ', i, '/', it)
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,ncol(  attr(x$objects_counts, "count_matrices_all")[[1]]):1]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,ncol(  attr(x$objects_counts, "count_matrices_all")[[2]]):1]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,ncol(x$alphabar):1] ## this we know as it is in the simplex and not LR space
x$W <- x$W[,ncol(x$W):1]
flename2 <- gsub('GenerationJnorm', 'GenerationJnormInv', flename)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it)
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
x
x$W
colSums(x$W)
which.max(colSums(x$W))
max_col <- which.max(colSums(x$W))
max_col
1:ncol(x$W)
1:ncol(x$W)[-max_col]
order_cols <- c(1:ncol(x$W)[-max_col], max_col)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,order_cols]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,order_cols]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,order_cols] ## this we know as it is in the simplex and not LR space
colSums(x$alphabar)
x$W <- x$W[,order_cols]
for(i in 0:(it-1)){
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it)
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
max_col <- which.max(colSums(x$W))
order_cols <- c(1:ncol(x$W)[-max_col], max_col)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,order_cols]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,order_cols]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,order_cols] ## this we know as it is in the simplex and not LR space
x$W <- x$W[,order_cols]
flename2 <- gsub('GenerationJnorm', 'GenerationJnormMax', flename)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
}
res_inference_maxbaseline <- lapply(0:(it-1), function(i) "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnormMax_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnormMax_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
res_inference_maxbaseline <- lapply(0:(it-1), function(i) readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnormMax_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnormMax_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")))
res_inference_maxbaseline
source("../../../2_inference_TMB/helper_TMB.R")
sapply(res_inference_maxbaseline, wald_TMB_wrapper)
pvals <- sapply(res_inference_maxbaseline, wald_TMB_wrapper)
res_inference_defaultbaseline <- lapply(0:(it-1), function(i) readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")))
pvals
hist(pvals)
## create true params based on PCAWG data
## ----------------------------------------------------------------------------------------- ##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
## ----------------------------------------------------------------------------------------- ##
source("../../../2_inference_TMB/helper_TMB.R")
flder_save <- '../../../../data/assessing_models_simulation/additional_files/'
system(paste0('mkdir -p ', flder_save))
##-----------------------------------------------------------------------------------------------------##
enough_samples = read.table("../../../../data/pcawg/CT_sufficient_samples.txt", comment.char='#')[,1]
enough_samples
read_info <- function(ct){
.x <- list(diagRE_DMDL_SP = try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMDL_SP = try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDM_", ct, "_signaturesPCAWG.RDS"))),
dataset_active_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../../../data/", override_warning_X_Z = T))
.x
}
read_info_list <- lapply(enough_samples, function(ct){
read_info(ct)
}); names(read_info_list) <- enough_samples
fullDM_extra <- list()
basename <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset"
gsub("GenerationJnorm", "GenerationJnormMax", basename)
res_inference_maxbaseline <- lapply(0:(it-1), function(i) readRDS(gsub("GenerationJnorm", "GenerationJnormMax", basename)))
it=200
res_inference_maxbaseline <- lapply(0:(it-1), function(i) readRDS(gsub("GenerationJnorm", "GenerationJnormMax", basename)))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("../../../2_inference_TMB/helper_TMB.R")
it=200
basename <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("../../../2_inference_TMB/helper_TMB.R")
source("../../2_inference_TMB/helper_TMB.R")
it=200
basename <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset"
res_inference_defaultbaseline <- lapply(0:(it-1), function(i) readRDS(paste0(, i, ".RDS")))
res_inference_maxbaseline <- lapply(0:(it-1), function(i) readRDS(gsub("GenerationJnorm", "GenerationJnormMax", basename)))
res_inference_maxbaseline <- lapply(0:(it-1), function(i) readRDS(paste0(gsub("GenerationJnorm", "GenerationJnormMax", basename), i, ".RDS"))
)
basename <- "../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset"
res_inference_defaultbaseline <- lapply(0:(it-1), function(i) readRDS(paste0(basename, i, ".RDS")))
res_inference_maxbaseline <- lapply(0:(it-1), function(i) readRDS(paste0(gsub("GenerationJnorm", "GenerationJnormMax", basename), i, ".RDS")))
## ----------------------------------------------------------------------------------------- ##
ct <- 'Lung-SCC'
betas2 <- matrix(python_like_select_name(diagRE_params[[ct]]$par.fixed, 'beta'), nrow=2)
cov2 <- diag(exp(python_like_select_name(diagRE_params[[ct]]$par.fixed, 'logs_sd_RE')))
plot(as.vector(cov2),
as.vector(cov(matrix(diagRE_params[[ct]]$par.random, ncol=ncol(betas2)))), col=
as.factor(as.vector(diag(1, ncol(betas2)))))
abline(coef = c(0,1), lty='dashed') ## this is NOT BAD AT ALL!
lambdas <- python_like_select_name(diagRE_params[[ct]]$par.fixed, 'log_lambda')
diagRE_params <- lapply(enough_samples, read_diagRE)
read_diagRE <- function(ct){
try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS")))
}
read_fullRE <- function(ct){
try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDM_", ct, "_signaturesPCAWG.RDS")))
}
diagRE_params <- lapply(enough_samples, read_diagRE)
fullRE_params <- lapply(enough_samples, read_fullRE)
betas2 <- matrix(python_like_select_name(diagRE_params[[ct]]$par.fixed, 'beta'), nrow=2)
## create true params based on PCAWG data
## ----------------------------------------------------------------------------------------- ##
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
## ----------------------------------------------------------------------------------------- ##
## ----------------------------------------------------------------------------------------- ##
source("../../../2_inference_TMB/helper_TMB.R")
flder_save <- '../../../../data/assessing_models_simulation/additional_files/'
system(paste0('mkdir -p ', flder_save))
## ----------------------------------------------------------------------------------------- ##
##-----------------------------------------------------------------------------------------------------##
enough_samples = read.table("../../../../data/pcawg/CT_sufficient_samples.txt", comment.char='#')[,1]
enough_samples
read_info <- function(ct){
.x <- list(diagRE_DMDL_SP = try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMDL_SP = try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDM_", ct, "_signaturesPCAWG.RDS"))),
dataset_active_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../../../data/", override_warning_X_Z = T))
.x
}
read_info_list <- lapply(enough_samples, function(ct){
read_info(ct)
}); names(read_info_list) <- enough_samples
fullDM_extra <- list()
##-----------------------------------------------------------------------------------------------------##
#---------------------------------------------------------------------------#
TMB::compile("../../../2_inference_TMB/mm_multinomial/fullRE_ME_dirichletmultinomial.cpp",  "-std=gnu++17")
dyn.load(dynlib("../../../2_inference_TMB/mm_multinomial/fullRE_ME_dirichletmultinomial"))
## ----------------------------------------------------------------------------------------- ##
ct <- 'Lung-SCC'
betas2 <- matrix(python_like_select_name(diagRE_params[[ct]]$par.fixed, 'beta'), nrow=2)
diagRE_params <- lapply(enough_samples, read_diagRE)
read_diagRE <- function(ct){
try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS")))
}
read_fullRE <- function(ct){
try(readRDS(paste0("../../../../results/results_TMB/pcawg_robjects/tmb_results/nlminb/fullREDM_", ct, "_signaturesPCAWG.RDS")))
}
diagRE_params <- lapply(enough_samples, read_diagRE)
fullRE_params <- lapply(enough_samples, read_fullRE)
names(diagRE_params) <- names(fullRE_params) <- enough_samples
betas2 <- matrix(python_like_select_name(diagRE_params[[ct]]$par.fixed, 'beta'), nrow=2)
betas2
dim(betas2)
ncol(betas2)
rep(0, ncol(betas2))
saveRDS(rep(0, ncol(betas2)), paste0(flder_save, "multiple_fixed_betaslopezerosPCAWG4.RDS"))
betas2
rep(0, ncol(betas2))
betas2
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
it=200
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it, '\n')
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
i=0
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it, '\n')
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
for(i in 0:(it-1)){
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it, '\n')
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4", i, ".RDS")
#flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
max_col <- which.max(colSums(x$W))
order_cols <- c(1:ncol(x$W)[-max_col], max_col)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,order_cols]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,order_cols]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,order_cols] ## this we know as it is in the simplex and not LR space
x$W <- x$W[,order_cols]
flename2 <- gsub('GenerationJnorm', 'GenerationJnormMax', flename)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
}
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
for(i in 0:(it-1)){
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it, '\n')
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
#flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
max_col <- which.max(colSums(x$W))
order_cols <- c(1:ncol(x$W)[-max_col], max_col)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,order_cols]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,order_cols]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,order_cols] ## this we know as it is in the simplex and not LR space
x$W <- x$W[,order_cols]
flename2 <- gsub('GenerationJnorm', 'GenerationJnormMax', flename)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
}
library(latex2exp)
latex2exp::TeX('\beta_0')
latex2exp::TeX('\\beta_0')
a='asdsadsadad_dataset0.RDS'
gsub("_dataset.*", "", a)
saveRDS(rep(0.1, ncol(betas2)), paste0(flder_save, "multiple_fixed_betaslopeonechangingPCAWG4.RDS")) ## only baseline signature changes
basename <- "../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4_dataset"
it=200
basename <- "../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4_dataset"
res_inference_defaultbaseline <- lapply(0:(it-1), function(i) readRDS(paste0(basename, i, ".RDS")))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("../../2_inference_TMB/helper_TMB.R")
it=200
basename <- "../../../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_diagREDM_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4_dataset"
res_inference_defaultbaseline <- lapply(0:(it-1), function(i) readRDS(paste0(basename, i, ".RDS")))
res_inference_maxbaseline <- lapply(0:(it-1), function(i) readRDS(paste0(gsub("GenerationJnorm", "GenerationJnormMax", basename), i, ".RDS")))
res_inference_maxbaseline
pvals <- sapply(res_inference_maxbaseline, wald_TMB_wrapper)
pvals_default <- sapply(res_inference_maxbaseline, wald_TMB_wrapper)
pvals_maxbaseline <- sapply(res_inference_maxbaseline, wald_TMB_wrapper)
plot(pvals_default, pvals_maxbaseline)
plot(pvals_default, pvals_maxbaseline), abline(coef = c(0,1))
plot(pvals_default, pvals_maxbaseline),; abline(coef = c(0,1))
plot(pvals_default, pvals_maxbaseline); abline(coef = c(0,1))
plot(pvals_default, pvals_maxbaseline); abline(coef = c(0,1), col='blue')
ggplot(data.frame(pvals_default, pvals_maxbaseline), aes(x=pvals_default, y=pvals_maxbaseline))
library(ggplot2)
pvals_default
pvals_maxbaseline
pvals_default
pvals_maxbaseline == pvals_default
res_inference_maxbaseline
res_inference_maxbaseline[[1]]
res_inference_defaultbaseline[[1]]
res_inference_maxbaseline[[1]]
ggplot(data.frame(pvals_default, pvals_maxbaseline), aes(x=pvals_default, y=pvals_maxbaseline))+
geom_abline(slope = 1, intercept = 0)
ggplot(data.frame(pvals_default, pvals_maxbaseline), aes(x=pvals_default, y=pvals_maxbaseline))+
geom_abline(slope = 1, intercept = 0, lty='dashed')+geom_point()
theme_set(theme_bw())
ggplot(data.frame(pvals_default, pvals_maxbaseline), aes(x=pvals_default, y=pvals_maxbaseline))+
geom_abline(slope = 1, intercept = 0, lty='dashed')+geom_point()
ggplot(data.frame(pvals_default, pvals_maxbaseline), aes(x=pvals_default, y=pvals_maxbaseline))+
geom_abline(slope = 1, intercept = 0, lty='dashed')+geom_point()+
labs(x='P-values from default baseline', y='P-values using most abundant category as baseline')
ggplot(data.frame(pvals_default, pvals_maxbaseline), aes(x=pvals_default, y=pvals_maxbaseline))+
geom_abline(slope = 1, intercept = 0, lty='dashed')+geom_point()+
labs(x='p-values from default baseline', y='p-values using most abundant category as baseline')
res_inference_defaultbaseline[[1]]
plot_betas(res_inference_defaultbaseline[[1]], return_df = T)
plot_betas(res_inference_defaultbaseline[[2]], return_df = T)
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select('Std. Error', 'LogR')
library(dplyr)
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select('Std. Error', 'LogR')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR'))
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR')) %>% dcast(Estimate~type_beta)
library(reshape2)
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR')) %>% dcast(Estimate~type_beta)
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR')) %>% dcast(.~type_beta)
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR')) %>% dcast(.~type_beta, value.var = 'Estimate')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR')) %>% dcast(value.var = 'Estimate')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR')) %>% dcast(Estimate~type_beta, value.var = 'Estimate')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR')) %>%
dcast(.~type_beta, value.var = 'Estimate')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error', 'LogR'))# %>%
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR.~type_beta, value.var = 'Estimate')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')
softmax(plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')[,2])
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')[,2]
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')[,1]
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')
xxx <- plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate')
xxx
xxx[,2]
(plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate'))[,2]
softmax((plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate'))[,2])
softmax(c((plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate'))[,2], 0))
plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR')
get_softmax_df <- function(i){
apply(i, 2, function(j) softmax(c(j,0)))
}
get_softmax_df(plot_betas(res_inference_defaultbaseline[[2]], return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR'))
lapply(res_inference_defaultbaseline, function(k) get_softmax_df(plot_betas(k, return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR')))
res_inference_defaultbaseline[[1]]
typeof(res_inference_defaultbaseline[[1]])
get_softmax_df <- function(i){
if(typeof(i) == 'character'){
NA
}else{
apply(i, 2, function(j) softmax(c(j,0)))
}
}
lapply(res_inference_defaultbaseline, function(k) get_softmax_df(plot_betas(k, return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR')))
lapply(res_inference_defaultbaseline[1], function(k) get_softmax_df(plot_betas(k, return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR')))
res_inference_defaultbaseline[1]
get_softmax_df <- function(i){
if(typeof(i) == 'character'){
NA
}else{
i = plot_betas(i, return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR'))
get_softmax_df <- function(i){
if(typeof(i) == 'character'){
NA
}else{
i = plot_betas(i, return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR')
apply(i, 2, function(j) softmax(c(j,0)))
}
}
lapply(res_inference_defaultbaseline[1], function(k) get_softmax_df)
get_softmax_df <- function(i){
if(typeof(i) == 'character'){
return(NA)
}else{
i = plot_betas(i, return_df = T) %>% select(-c('Std. Error')) %>%
dcast(LogR~type_beta, value.var = 'Estimate') %>% select(-'LogR')
return(apply(i, 2, function(j) softmax(c(j,0))))
}
}
lapply(res_inference_defaultbaseline[1], function(k) get_softmax_df)
lapply(res_inference_defaultbaseline[1], get_softmax_df)
lapply(res_inference_defaultbaseline, get_softmax_df)
softmaxed_res_defaultbaseline <- lapply(res_inference_defaultbaseline, get_softmax_df)
softmaxed_res_maxbaseline <- lapply(res_inference_maxbaseline, get_softmax_df)
!is.na(sapply(softmaxed_res_defaultbaseline, typeof))
!is.na(sapply(softmaxed_res_maxbaseline, typeof))
!is.na(sapply(softmaxed_res_defaultbaseline)
)
!is.na(softmaxed_res_defaultbaseline)
keep_runs <- (!is.na(softmaxed_res_defaultbaseline)) & (!is.na(softmaxed_res_maxbaseline))
keep_runs <- (!is.na(softmaxed_res_defaultbaseline)) & (!is.na(softmaxed_res_maxbaseline))
keep_runs
softmaxed_res_defaultbaseline
softmaxed_res_defaultbaseline[keep_runs]
softmaxed_res_maxbaseline[keep_runs]
do.call('rbind', softmaxed_res_defaultbaseline[keep_runs])
do.call('rbind', softmaxed_res_maxbaseline[keep_runs])
data.frame(default_baseline=do.call('rbind', softmaxed_res_defaultbaseline[keep_runs]),
max_baseline=do.call('rbind', softmaxed_res_maxbaseline[keep_runs]))
do.call('rbind', softmaxed_res_defaultbaseline[keep_runs])
length(softmaxed_res_defaultbaseline)
length(softmaxed_res_maxbaseline)
sapply(softmaxed_res_defaultbaseline[keep_runs], dim)
sapply(softmaxed_res_maxbaseline[keep_runs]), dim)
sapply(softmaxed_res_maxbaseline[keep_runs], dim)
order_cols
# From invert_columns_dataset.R
# order_cols
# [1] 1 2 3 4 5 6 3
order_cols <- c(1, 2, 3, 4, 5, 6, 3)
softmaxed_res_defaultbaseline
softmaxed_res_maxbaseline
softmaxed_res_defaultbaseline
res_inference_defaultbaseline
res_inference_defaultbaseline[[1]]
res_inference_defaultbaseline[[2]]
res_inference_maxbaseline[[1]]
order_cols
c( (1:ncol(x$W)[-max_col]), max_col)
c( (1:ncol(x$W))[-max_col], max_col)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
it=200
for(i in 0:(it-1)){
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it, '\n')
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
#flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
max_col <- which.max(colSums(x$W))
order_cols <- c( (1:ncol(x$W))[-max_col], max_col)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,order_cols]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,order_cols]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,order_cols] ## this we know as it is in the simplex and not LR space
x$W <- x$W[,order_cols]
flename2 <- gsub('GenerationJnorm', 'GenerationJnormMax', flename)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
}
for(i in 0:(it-1)){
## Using the category with highest total count as baseline
cat('Iteration: ', i, '/', it, '\n')
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopePCAWG4_covmatPCAWG4_dataset", i, ".RDS")
# flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopezerosPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
flename <- paste0("../../../../data/assessing_models_simulation/datasets/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4/multiple_GenerationJnorm_200_14072_80_6_0_betainterceptPCAWG4_betaslopeonechangingPCAWG4_covmatPCAWG4_dataset", i, ".RDS")
x <- readRDS(flename)
max_col <- which.max(colSums(x$W))
order_cols <- c( (1:ncol(x$W))[-max_col], max_col)
attr(x$objects_counts, "count_matrices_all")[[1]] <-   attr(x$objects_counts, "count_matrices_all")[[1]][,order_cols]
attr(x$objects_counts, "count_matrices_all")[[2]] <-   attr(x$objects_counts, "count_matrices_all")[[2]][,order_cols]
## modify for bias assessment
if(is.null(dim(x$sd_RE))){
## is a vector
x$sd_RE <-   NULL ## as we simply have not simulated the data with the original baseline
}
x$beta <- NULL  ## as we simply have not simulated the data with the original baseline
x$u <- NULL  ## as we simply have not simulated the data with the original baseline
x$alpha <- NULL  ## as we simply have not simulated the data with the original baseline
x$alphabar <- x$alphabar[,order_cols] ## this we know as it is in the simplex and not LR space
x$W <- x$W[,order_cols]
flename2 <- gsub('GenerationJnorm', 'GenerationJnormMax', flename)
system(paste0('mkdir -p ', dirname(flename2)))
saveRDS(x, file = flename2)
}
