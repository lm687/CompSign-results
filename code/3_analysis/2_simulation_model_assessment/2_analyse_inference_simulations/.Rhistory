n=10
cbind(c(rep(1,n),rep(0,n)), c(rep(0,n),rep(1,n)))
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# set.seed(1234)
library(uuid)
library(ggplot2)
library(reshape2)
library(compositions)
library(TMB)
library(gridExtra)
library(Ternary)
# source("../../../GlobalDA/code/2_inference/helper/helper_DA_stan.R")
# source("../../../GlobalDA/code/3_analysis/helper/helper_analyse_posteriors.R")
source("../../../../../GlobalDA/code/2_inference_TMB/helper_TMB.R")
source("../helper/functions.R")
source("../helper/header.R")
source("../../../../Vias_Brenton/copy_number_analysis_organoids/helper_functions.R")
cov <- diag(1)
d <- 5
cov <- diag(rep(1, d-1))
d <- 5
cov <- diag(rep(1, d-1))
beta <- matrix(c(runif(d-1), c(0,0,1,0)), byrow=T)
beta
beta <- matrix(c(runif(d-1), c(0,0,1,0)), byrow=T, nrow=2)
beta
n <- 100
x <- cbind(1, c(rep(0, n/2), rep(1, n/2)))
x
x%*%beta
a <- x%*%beta
a <- compositions::ilrInv(a)
a
a <- as(compositions::ilrInv(a), 'matrix')
a
W <- x%*%beta
W <- as(compositions::ilrInv(W), 'matrix')
W
rowSums(W) ## observed data in the simplex
W <- as(compositions::alrInv(W), 'matrix')
W <- x%*%beta
W <- as(compositions::alrInv(W), 'matrix')
rowSums(W) ## observed data in the simplex
W
W <- ilr(W)
W
W <- x%*%beta
W
dim(as(compositions::alrInv(W))
)
dim(as(compositions::alrInv(W), 'matrix'))
dim(beta)
W <- as(compositions::alrInv(W), 'matrix')
rowSums(W) ## observed data in the simplex
Wilr <- ilr(W)
Wilr
n
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x)
wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
nindividuals=n)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
nindividuals=n)
wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
n_individuals=n)
wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
n
TMB_data
wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEe.cpp"), "-std=gnu++17")
## the model, in cpp
folder_of_TMB_model <- "../tmb_RE/" ## YOU CHANGE THIS! RELATIVE PATH TO TMB MODEL (IN CPP)
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEe.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEe")))
## the model, in cpp
folder_of_TMB_model <- "../tmb_RE/"
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEe.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEe")))
wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
res_FE <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
res_FE
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEd.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEd")))
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEb.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEb")))
res_FE <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEb", object = TMB_data)
res_FE
image(Wilr)
Wilr
Wilr <- as(ilr(W), 'matrix')
Wilr
W <- x%*%beta
W <- as(compositions::alrInv(W), 'matrix')
rowSums(W) ## observed data in the simplex
Wilr <- as(ilr(W), 'matrix')
Wilr
image(Wilr)
W <- x%*%beta
W <- as(compositions::alrInv(W+runif(n*(d-1))), 'matrix')
rowSums(W) ## observed data in the simplex
Wilr <- as(ilr(W), 'matrix')
Wilr
image(Wilr)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
## the model, in cpp
folder_of_TMB_model <- "../tmb_RE/"
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEe.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEe")))
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEb.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEb")))
# res_FE <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
res_FE <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEb", object = TMB_data)
res_FE
plot_betas(res_FE)
Walr <- as(alr(W), 'matrix')
Walr
TMB_data_ALR = list(Y = Walr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
res_FE_alr <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEb", object = TMB_data_ALR)
plot_betas(res_FE_alr)
TMB_data_ALRv2 <- TMB_data_ALR
TMB_data_ALRv2$Y
TMB_data_ALRv2$Y <- TMB_data_ALRv2$Y[,ncol(TMB_data_ALRv2$Y):1]
beta <- matrix(c(runif(d-1), c(0,0,0,1)), byrow=T, nrow=2)
x <- cbind(1, c(rep(0, n/2), rep(1, n/2)))
W <- x%*%beta
W <- as(compositions::alrInv(W+runif(n*(d-1))), 'matrix')
rowSums(W) ## observed data in the simplex
Wilr <- as(ilr(W), 'matrix')
Wilr
Walr <- as(alr(W), 'matrix')
Walr
image(Wilr)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(uuid)
library(ggplot2)
library(reshape2)
library(compositions)
library(TMB)
library(gridExtra)
library(Ternary)
source("../../../../../GlobalDA/code/2_inference_TMB/helper_TMB.R")
source("../helper/functions.R")
source("../helper/header.R")
source("../../../../Vias_Brenton/copy_number_analysis_organoids/helper_functions.R")
d <- 5
n <- 100
cov <- diag(rep(1, d-1))
beta <- matrix(c(runif(d-1), c(0,0,0,1)), byrow=T, nrow=2)
x <- cbind(1, c(rep(0, n/2), rep(1, n/2)))
W <- x%*%beta
W <- as(compositions::alrInv(W+runif(n*(d-1))), 'matrix')
rowSums(W) ## observed data in the simplex
Wilr <- as(ilr(W), 'matrix')
Wilr
Walr <- as(alr(W), 'matrix')
Walr
image(Wilr)
image(Walr)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
TMB_data_ALR = list(Y = Walr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
ilrBase()
ilrBase()
ilrBase(d)
ilrBase(D = d)
TMB_data = list(Y = Wilr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
TMB_data_ALR = list(Y = Walr,
d = d-1,
n = n,
x = x,
z=give_z_matrix(100))
TMB_data_ALRv2 <- TMB_data_ALR
TMB_data_ALRv2$Y <- TMB_data_ALRv2$Y[,ncol(TMB_data_ALRv2$Y):1]
## the model, in cpp
folder_of_TMB_model <- "../tmb_RE/"
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEe.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEe")))
TMB::compile(paste0(folder_of_TMB_model, "tmb_MVN_partial_ILR_FEb.cpp"), "-std=gnu++17")
dyn.load(dynlib(paste0(folder_of_TMB_model, "../tmb_RE/tmb_MVN_partial_ILR_FEb")))
# res_FE <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEe", object = TMB_data)
res_FE <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEb", object = TMB_data)
res_FE_alr <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEb", object = TMB_data_ALR)
res_FE_alrv2 <- wrapper_run_TMB_use_nlminb(model = "tmb_MVN_partial_ILR_FEb", object = TMB_data_ALR)
res_FE
grid.arrange(
plot_betas(res_FE),
plot_betas(res_FE_alr),
plot_betas(res_FE_alrv2))
grid.arrange(
plot_betas(res_FE),
plot_betas(res_FE_alr))#,
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
multiple_runs = T
# generation <- 'GenerationJnormBTwoLambdasOneChangingBeta'
# generation <- 'GenerationMixturefewersignaturespairedObsNmInvPCAWGCNSGBMPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMColoRectAdenoCAPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMCNSGBMPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMEsoAdenoCAPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMHeadSCCPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMKidneyChRCCPCAWG'
# generation <- 'GenerationMixtureallsignaturespairedObsNmCNSGBMPCAWG'
# generation <- 'GenerationPois'
# generation <- 'GenerationMixturefewersignaturespairedObsNmGaussianVarPCAWGProstAdenoCAPCAWG'
generation <- 'GenerationJnormBTwoLambdasOneChangingBeta'
source("../../../2_inference_TMB/helper_TMB.R")
source("../../../1_create_ROO/roo_functions.R")
source("helper_model_assessment.R")
include_singleREDM <- T
library(grid)
library(gridExtra)
#library(ggpubr)
library(reshape2)
library(jcolors)
library(cowplot)
library(ggrepel)
library(dplyr)
####
warning('Note: despite the name, pvals_adj are not adjusted for multiple-testing')
require( tikzDevice )
if(multiple_runs){
flder_out <- "../../../../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/"
flder_in <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries_multiple/"
}else{
flder_out <- "../../../../results/results_TMB/simulated_datasets/mixed_effects_models/"
flder_in <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/"
}
manual = F
if(manual){
names1 <- paste0(flder_in, generation, "_fullREM_manual.RDS")
names2 <- paste0(flder_in, generation, "_fullREDMsinglelambda_manual.RDS")
names3 <- paste0(flder_in, generation, "_diagREDMsinglelambda_manual.RDS")
names4 <- paste0(flder_in, generation, "_diagREDM_manual.RDS")
runs_fullREM0 = readRDS(names1)
runs_fullREDMSL0 = readRDS(names2)
runs_diagREDMSL0 = readRDS(names3)
runs_diagREDM0 = readRDS(names3)
}else{
runs_fullREM0 = readRDS(paste0(flder_in, generation, "_fullREM.RDS"))
runs_fullREDMSL0 = readRDS(paste0(flder_in, generation, "_fullREDMsinglelambda.RDS"))
runs_diagREDMSL0 = readRDS(paste0(flder_in, generation, "_diagREDMsinglelambda.RDS"))
runs_diagREDM0 = readRDS(paste0(flder_in, generation, "_diagREDM.RDS"))
if(include_singleREDM){
runs_singleREDM0 = readRDS(paste0(flder_in, generation, "_singleREDM.RDS"))
}
}
object_save <- readRDS(file = paste0("../../../../data/assessing_models_simulation/summaries_synthetic_DA/",
generation, ".RDS"))
object_save
object_save$pvals_data_frame$ttest_props
table(object_save$pvals_data_frame$ttest_props<0.05)
table(p.adjust(object_save$pvals_data_frame$ttest_props,method = 'bonferroni'))
table(p.adjust(object_save$pvals_data_frame$ttest_props,method = 'bonferroni') < 0.05)
hist(object_save$pvals_data_frame$ttest_props)
hist(log(object_save$pvals_data_frame$ttest_props))
hist(log10(object_save$pvals_data_frame$ttest_props))
sort(table(object_save$pvals_data_frame$ttest_props))
sort(table(p.adjust(object_save$pvals_data_frame$ttest_props,method = 'bonferroni')))
sort(table(p.adjust(object_save$pvals_data_frame$ttest_props,p.adjust.method= = 'bonferroni')))
sort(table(p.adjust(object_save$pvals_data_frame$ttest_props,p.adjust.method= = 'bonferroni')))
sort(table(p.adjust(object_save$pvals_data_frame$ttest_props,method = 'bonferroni')))
sort(table(p.adjust(object_save$pvals_data_frame$ttest_props,p.adjust.method= 'bonferroni')))
length(object_save$pvals_data_frame$ttest_props)
object_save$pvals_data_frame$ttest_props*length(object_save$pvals_data_frame$ttest_props)
